// Code generated by pggen. DO NOT EDIT.

package repo

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
	"time"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	// CreateEventTypes inserts event types into the database
	CreateEventTypes(ctx context.Context, eventTypes []NewEventType) ([]CreateEventTypesRow, error)
	// CreateEventTypesBatch enqueues a CreateEventTypes query into batch to be executed
	// later by the batch.
	CreateEventTypesBatch(batch genericBatch, eventTypes []NewEventType)
	// CreateEventTypesScan scans the result of an executed CreateEventTypesBatch query.
	CreateEventTypesScan(results pgx.BatchResults) ([]CreateEventTypesRow, error)

	// CreateNotificationTypes inserts notification types into the database
	CreateNotificationTypes(ctx context.Context, notificationTypes []NewNotificationType) ([]CreateNotificationTypesRow, error)
	// CreateNotificationTypesBatch enqueues a CreateNotificationTypes query into batch to be executed
	// later by the batch.
	CreateNotificationTypesBatch(batch genericBatch, notificationTypes []NewNotificationType)
	// CreateNotificationTypesScan scans the result of an executed CreateNotificationTypesBatch query.
	CreateNotificationTypesScan(results pgx.BatchResults) ([]CreateNotificationTypesRow, error)

	// CreateProviders inserts providers into the database
	CreateProviders(ctx context.Context, providers []NewProvider) ([]CreateProvidersRow, error)
	// CreateProvidersBatch enqueues a CreateProviders query into batch to be executed
	// later by the batch.
	CreateProvidersBatch(batch genericBatch, providers []NewProvider)
	// CreateProvidersScan scans the result of an executed CreateProvidersBatch query.
	CreateProvidersScan(results pgx.BatchResults) ([]CreateProvidersRow, error)

	// CreateSubscriptions inserts subscriptions into the database
	CreateSubscriptions(ctx context.Context, subscriptions []NewSubscription) ([]CreateSubscriptionsRow, error)
	// CreateSubscriptionsBatch enqueues a CreateSubscriptions query into batch to be executed
	// later by the batch.
	CreateSubscriptionsBatch(batch genericBatch, subscriptions []NewSubscription)
	// CreateSubscriptionsScan scans the result of an executed CreateSubscriptionsBatch query.
	CreateSubscriptionsScan(results pgx.BatchResults) ([]CreateSubscriptionsRow, error)

	// DeleteSubscription deletes subscriptions TODO - soft delete
	DeleteSubscription(ctx context.Context, ids []string) (pgconn.CommandTag, error)
	// DeleteSubscriptionBatch enqueues a DeleteSubscription query into batch to be executed
	// later by the batch.
	DeleteSubscriptionBatch(batch genericBatch, ids []string)
	// DeleteSubscriptionScan scans the result of an executed DeleteSubscriptionBatch query.
	DeleteSubscriptionScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	// GetEventTypes fetches a batch of event types by id
	GetEventTypes(ctx context.Context, ids []string) ([]GetEventTypesRow, error)
	// GetEventTypesBatch enqueues a GetEventTypes query into batch to be executed
	// later by the batch.
	GetEventTypesBatch(batch genericBatch, ids []string)
	// GetEventTypesScan scans the result of an executed GetEventTypesBatch query.
	GetEventTypesScan(results pgx.BatchResults) ([]GetEventTypesRow, error)

	// GetNotificationTypes fetches a batch of event types by id
	GetNotificationTypes(ctx context.Context, ids []string) ([]GetNotificationTypesRow, error)
	// GetNotificationTypesBatch enqueues a GetNotificationTypes query into batch to be executed
	// later by the batch.
	GetNotificationTypesBatch(batch genericBatch, ids []string)
	// GetNotificationTypesScan scans the result of an executed GetNotificationTypesBatch query.
	GetNotificationTypesScan(results pgx.BatchResults) ([]GetNotificationTypesRow, error)

	// GetProviders fetches a batch of providers by id
	GetProviders(ctx context.Context, ids []string) ([]GetProvidersRow, error)
	// GetProvidersBatch enqueues a GetProviders query into batch to be executed
	// later by the batch.
	GetProvidersBatch(batch genericBatch, ids []string)
	// GetProvidersScan scans the result of an executed GetProvidersBatch query.
	GetProvidersScan(results pgx.BatchResults) ([]GetProvidersRow, error)

	// GetSubscriptions fetches a batch of subscriptions by id
	GetSubscriptions(ctx context.Context, ids []string) ([]GetSubscriptionsRow, error)
	// GetSubscriptionsBatch enqueues a GetSubscriptions query into batch to be executed
	// later by the batch.
	GetSubscriptionsBatch(batch genericBatch, ids []string)
	// GetSubscriptionsScan scans the result of an executed GetSubscriptionsBatch query.
	GetSubscriptionsScan(results pgx.BatchResults) ([]GetSubscriptionsRow, error)

	// ListEventTypes returns a page of event types
	ListEventTypes(ctx context.Context, createdAfter time.Time, limit int) ([]ListEventTypesRow, error)
	// ListEventTypesBatch enqueues a ListEventTypes query into batch to be executed
	// later by the batch.
	ListEventTypesBatch(batch genericBatch, createdAfter time.Time, limit int)
	// ListEventTypesScan scans the result of an executed ListEventTypesBatch query.
	ListEventTypesScan(results pgx.BatchResults) ([]ListEventTypesRow, error)

	// ListNotificationTypes returns a page of notification types
	ListNotificationTypes(ctx context.Context, createdAfter time.Time, limit int) ([]ListNotificationTypesRow, error)
	// ListNotificationTypesBatch enqueues a ListNotificationTypes query into batch to be executed
	// later by the batch.
	ListNotificationTypesBatch(batch genericBatch, createdAfter time.Time, limit int)
	// ListNotificationTypesScan scans the result of an executed ListNotificationTypesBatch query.
	ListNotificationTypesScan(results pgx.BatchResults) ([]ListNotificationTypesRow, error)

	// ListProviders returns a page of providers
	ListProviders(ctx context.Context, createdAfter time.Time, limit int) ([]ListProvidersRow, error)
	// ListProvidersBatch enqueues a ListProviders query into batch to be executed
	// later by the batch.
	ListProvidersBatch(batch genericBatch, createdAfter time.Time, limit int)
	// ListProvidersScan scans the result of an executed ListProvidersBatch query.
	ListProvidersScan(results pgx.BatchResults) ([]ListProvidersRow, error)

	// ListSubscriptions returns a page of subscriptions
	ListSubscriptions(ctx context.Context, createdAfter time.Time, limit int) ([]ListSubscriptionsRow, error)
	// ListSubscriptionsBatch enqueues a ListSubscriptions query into batch to be executed
	// later by the batch.
	ListSubscriptionsBatch(batch genericBatch, createdAfter time.Time, limit int)
	// ListSubscriptionsScan scans the result of an executed ListSubscriptionsBatch query.
	ListSubscriptionsScan(results pgx.BatchResults) ([]ListSubscriptionsRow, error)

	// ListEventSubscriptions returns a page of notifications for given event and tenant
	ListEventSubscriptions(ctx context.Context, params ListEventSubscriptionsParams) ([]ListEventSubscriptionsRow, error)
	// ListEventSubscriptionsBatch enqueues a ListEventSubscriptions query into batch to be executed
	// later by the batch.
	ListEventSubscriptionsBatch(batch genericBatch, params ListEventSubscriptionsParams)
	// ListEventSubscriptionsScan scans the result of an executed ListEventSubscriptionsBatch query.
	ListEventSubscriptionsScan(results pgx.BatchResults) ([]ListEventSubscriptionsRow, error)
}

type DBQuerier struct {
	conn  genericConn   // underlying Postgres transport to use
	types *typeResolver // resolve types by name
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// genericBatch batches queries to send in a single network request to a
// Postgres server. This is usually backed by *pgx.Batch.
type genericBatch interface {
	// Queue queues a query to batch b. query can be an SQL query or the name of a
	// prepared statement. See Queue on *pgx.Batch.
	Queue(query string, arguments ...interface{})
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return NewQuerierConfig(conn, QuerierConfig{})
}

type QuerierConfig struct {
	// DataTypes contains pgtype.Value to use for encoding and decoding instead
	// of pggen-generated pgtype.ValueTranscoder.
	//
	// If OIDs are available for an input parameter type and all of its
	// transitive dependencies, pggen will use the binary encoding format for
	// the input parameter.
	DataTypes []pgtype.DataType
}

// NewQuerierConfig creates a DBQuerier that implements Querier with the given
// config. conn is typically *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerierConfig(conn genericConn, cfg QuerierConfig) *DBQuerier {
	return &DBQuerier{conn: conn, types: newTypeResolver(cfg.DataTypes)}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

// preparer is any Postgres connection transport that provides a way to prepare
// a statement, most commonly *pgx.Conn.
type preparer interface {
	Prepare(ctx context.Context, name, sql string) (sd *pgconn.StatementDescription, err error)
}

// PrepareAllQueries executes a PREPARE statement for all pggen generated SQL
// queries in querier files. Typical usage is as the AfterConnect callback
// for pgxpool.Config
//
// pgx will use the prepared statement if available. Calling PrepareAllQueries
// is an optional optimization to avoid a network round-trip the first time pgx
// runs a query if pgx statement caching is enabled.
func PrepareAllQueries(ctx context.Context, p preparer) error {
	if _, err := p.Prepare(ctx, createEventTypesSQL, createEventTypesSQL); err != nil {
		return fmt.Errorf("prepare query 'CreateEventTypes': %w", err)
	}
	if _, err := p.Prepare(ctx, createNotificationTypesSQL, createNotificationTypesSQL); err != nil {
		return fmt.Errorf("prepare query 'CreateNotificationTypes': %w", err)
	}
	if _, err := p.Prepare(ctx, createProvidersSQL, createProvidersSQL); err != nil {
		return fmt.Errorf("prepare query 'CreateProviders': %w", err)
	}
	if _, err := p.Prepare(ctx, createSubscriptionsSQL, createSubscriptionsSQL); err != nil {
		return fmt.Errorf("prepare query 'CreateSubscriptions': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteSubscriptionSQL, deleteSubscriptionSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteSubscription': %w", err)
	}
	if _, err := p.Prepare(ctx, getEventTypesSQL, getEventTypesSQL); err != nil {
		return fmt.Errorf("prepare query 'GetEventTypes': %w", err)
	}
	if _, err := p.Prepare(ctx, getNotificationTypesSQL, getNotificationTypesSQL); err != nil {
		return fmt.Errorf("prepare query 'GetNotificationTypes': %w", err)
	}
	if _, err := p.Prepare(ctx, getProvidersSQL, getProvidersSQL); err != nil {
		return fmt.Errorf("prepare query 'GetProviders': %w", err)
	}
	if _, err := p.Prepare(ctx, getSubscriptionsSQL, getSubscriptionsSQL); err != nil {
		return fmt.Errorf("prepare query 'GetSubscriptions': %w", err)
	}
	if _, err := p.Prepare(ctx, listEventTypesSQL, listEventTypesSQL); err != nil {
		return fmt.Errorf("prepare query 'ListEventTypes': %w", err)
	}
	if _, err := p.Prepare(ctx, listNotificationTypesSQL, listNotificationTypesSQL); err != nil {
		return fmt.Errorf("prepare query 'ListNotificationTypes': %w", err)
	}
	if _, err := p.Prepare(ctx, listProvidersSQL, listProvidersSQL); err != nil {
		return fmt.Errorf("prepare query 'ListProviders': %w", err)
	}
	if _, err := p.Prepare(ctx, listSubscriptionsSQL, listSubscriptionsSQL); err != nil {
		return fmt.Errorf("prepare query 'ListSubscriptions': %w", err)
	}
	if _, err := p.Prepare(ctx, listEventSubscriptionsSQL, listEventSubscriptionsSQL); err != nil {
		return fmt.Errorf("prepare query 'ListEventSubscriptions': %w", err)
	}
	return nil
}

// NewEventType represents the Postgres composite type "new_event_type".
type NewEventType struct {
	Name   string       `json:"name"`
	Schema pgtype.JSONB `json:"schema"`
}

// NewNotificationType represents the Postgres composite type "new_notification_type".
type NewNotificationType struct {
	ProviderUid string       `json:"provider_uid"`
	Metadata    pgtype.JSONB `json:"metadata"`
	Name        string       `json:"name"`
}

// NewProvider represents the Postgres composite type "new_provider".
type NewProvider struct {
	Name string `json:"name"`
}

// NewSubscription represents the Postgres composite type "new_subscription".
type NewSubscription struct {
	NotificationTypeUid string       `json:"notification_type_uid"`
	TenantID            string       `json:"tenant_id"`
	Metadata            pgtype.JSONB `json:"metadata"`
}

// typeResolver looks up the pgtype.ValueTranscoder by Postgres type name.
type typeResolver struct {
	connInfo *pgtype.ConnInfo // types by Postgres type name
}

func newTypeResolver(types []pgtype.DataType) *typeResolver {
	ci := pgtype.NewConnInfo()
	for _, typ := range types {
		if txt, ok := typ.Value.(textPreferrer); ok && typ.OID != unknownOID {
			typ.Value = txt.ValueTranscoder
		}
		ci.RegisterDataType(typ)
	}
	return &typeResolver{connInfo: ci}
}

// findValue find the OID, and pgtype.ValueTranscoder for a Postgres type name.
func (tr *typeResolver) findValue(name string) (uint32, pgtype.ValueTranscoder, bool) {
	typ, ok := tr.connInfo.DataTypeForName(name)
	if !ok {
		return 0, nil, false
	}
	v := pgtype.NewValue(typ.Value)
	return typ.OID, v.(pgtype.ValueTranscoder), true
}

// setValue sets the value of a ValueTranscoder to a value that should always
// work and panics if it fails.
func (tr *typeResolver) setValue(vt pgtype.ValueTranscoder, val interface{}) pgtype.ValueTranscoder {
	if err := vt.Set(val); err != nil {
		panic(fmt.Sprintf("set ValueTranscoder %T to %+v: %s", vt, val, err))
	}
	return vt
}

type compositeField struct {
	name       string                 // name of the field
	typeName   string                 // Postgres type name
	defaultVal pgtype.ValueTranscoder // default value to use
}

func (tr *typeResolver) newCompositeValue(name string, fields ...compositeField) pgtype.ValueTranscoder {
	if _, val, ok := tr.findValue(name); ok {
		return val
	}
	fs := make([]pgtype.CompositeTypeField, len(fields))
	vals := make([]pgtype.ValueTranscoder, len(fields))
	isBinaryOk := true
	for i, field := range fields {
		oid, val, ok := tr.findValue(field.typeName)
		if !ok {
			oid = unknownOID
			val = field.defaultVal
		}
		isBinaryOk = isBinaryOk && oid != unknownOID
		fs[i] = pgtype.CompositeTypeField{Name: field.name, OID: oid}
		vals[i] = val
	}
	// Okay to ignore error because it's only thrown when the number of field
	// names does not equal the number of ValueTranscoders.
	typ, _ := pgtype.NewCompositeTypeValues(name, fs, vals)
	if !isBinaryOk {
		return textPreferrer{ValueTranscoder: typ, typeName: name}
	}
	return typ
}

func (tr *typeResolver) newArrayValue(name, elemName string, defaultVal func() pgtype.ValueTranscoder) pgtype.ValueTranscoder {
	if _, val, ok := tr.findValue(name); ok {
		return val
	}
	elemOID, elemVal, ok := tr.findValue(elemName)
	elemValFunc := func() pgtype.ValueTranscoder {
		return pgtype.NewValue(elemVal).(pgtype.ValueTranscoder)
	}
	if !ok {
		elemOID = unknownOID
		elemValFunc = defaultVal
	}
	typ := pgtype.NewArrayType(name, elemOID, elemValFunc)
	if elemOID == unknownOID {
		return textPreferrer{ValueTranscoder: typ, typeName: name}
	}
	return typ
}

// newNewEventType creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'new_event_type'.
func (tr *typeResolver) newNewEventType() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"new_event_type",
		compositeField{name: "name", typeName: "text", defaultVal: &pgtype.Text{}},
		compositeField{name: "schema", typeName: "jsonb", defaultVal: &pgtype.JSONB{}},
	)
}

// newNewEventTypeRaw returns all composite fields for the Postgres composite
// type 'new_event_type' as a slice of interface{} to encode query parameters.
func (tr *typeResolver) newNewEventTypeRaw(v NewEventType) []interface{} {
	return []interface{}{
		v.Name,
		v.Schema,
	}
}

// newNewNotificationType creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'new_notification_type'.
func (tr *typeResolver) newNewNotificationType() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"new_notification_type",
		compositeField{name: "provider_uid", typeName: "uuid", defaultVal: &pgtype.UUID{}},
		compositeField{name: "metadata", typeName: "jsonb", defaultVal: &pgtype.JSONB{}},
		compositeField{name: "name", typeName: "text", defaultVal: &pgtype.Text{}},
	)
}

// newNewNotificationTypeRaw returns all composite fields for the Postgres composite
// type 'new_notification_type' as a slice of interface{} to encode query parameters.
func (tr *typeResolver) newNewNotificationTypeRaw(v NewNotificationType) []interface{} {
	return []interface{}{
		v.ProviderUid,
		v.Metadata,
		v.Name,
	}
}

// newNewProvider creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'new_provider'.
func (tr *typeResolver) newNewProvider() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"new_provider",
		compositeField{name: "name", typeName: "text", defaultVal: &pgtype.Text{}},
	)
}

// newNewProviderRaw returns all composite fields for the Postgres composite
// type 'new_provider' as a slice of interface{} to encode query parameters.
func (tr *typeResolver) newNewProviderRaw(v NewProvider) []interface{} {
	return []interface{}{
		v.Name,
	}
}

// newNewSubscription creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'new_subscription'.
func (tr *typeResolver) newNewSubscription() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"new_subscription",
		compositeField{name: "notification_type_uid", typeName: "uuid", defaultVal: &pgtype.UUID{}},
		compositeField{name: "tenant_id", typeName: "text", defaultVal: &pgtype.Text{}},
		compositeField{name: "metadata", typeName: "jsonb", defaultVal: &pgtype.JSONB{}},
	)
}

// newNewSubscriptionRaw returns all composite fields for the Postgres composite
// type 'new_subscription' as a slice of interface{} to encode query parameters.
func (tr *typeResolver) newNewSubscriptionRaw(v NewSubscription) []interface{} {
	return []interface{}{
		v.NotificationTypeUid,
		v.TenantID,
		v.Metadata,
	}
}

// newNewEventTypeArray creates a new pgtype.ValueTranscoder for the Postgres
// '_new_event_type' array type.
func (tr *typeResolver) newNewEventTypeArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_new_event_type", "new_event_type", tr.newNewEventType)
}

// newNewEventTypeArrayInit creates an initialized pgtype.ValueTranscoder for the
// Postgres array type '_new_event_type' to encode query parameters.
func (tr *typeResolver) newNewEventTypeArrayInit(ps []NewEventType) pgtype.ValueTranscoder {
	dec := tr.newNewEventTypeArray()
	if err := dec.Set(tr.newNewEventTypeArrayRaw(ps)); err != nil {
		panic("encode []NewEventType: " + err.Error()) // should always succeed
	}
	return textPreferrer{ValueTranscoder: dec, typeName: "_new_event_type"}
}

// newNewEventTypeArrayRaw returns all elements for the Postgres array type '_new_event_type'
// as a slice of interface{} for use with the pgtype.Value Set method.
func (tr *typeResolver) newNewEventTypeArrayRaw(vs []NewEventType) []interface{} {
	elems := make([]interface{}, len(vs))
	for i, v := range vs {
		elems[i] = tr.newNewEventTypeRaw(v)
	}
	return elems
}

// newNewNotificationTypeArray creates a new pgtype.ValueTranscoder for the Postgres
// '_new_notification_type' array type.
func (tr *typeResolver) newNewNotificationTypeArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_new_notification_type", "new_notification_type", tr.newNewNotificationType)
}

// newNewNotificationTypeArrayInit creates an initialized pgtype.ValueTranscoder for the
// Postgres array type '_new_notification_type' to encode query parameters.
func (tr *typeResolver) newNewNotificationTypeArrayInit(ps []NewNotificationType) pgtype.ValueTranscoder {
	dec := tr.newNewNotificationTypeArray()
	if err := dec.Set(tr.newNewNotificationTypeArrayRaw(ps)); err != nil {
		panic("encode []NewNotificationType: " + err.Error()) // should always succeed
	}
	return textPreferrer{ValueTranscoder: dec, typeName: "_new_notification_type"}
}

// newNewNotificationTypeArrayRaw returns all elements for the Postgres array type '_new_notification_type'
// as a slice of interface{} for use with the pgtype.Value Set method.
func (tr *typeResolver) newNewNotificationTypeArrayRaw(vs []NewNotificationType) []interface{} {
	elems := make([]interface{}, len(vs))
	for i, v := range vs {
		elems[i] = tr.newNewNotificationTypeRaw(v)
	}
	return elems
}

// newNewProviderArray creates a new pgtype.ValueTranscoder for the Postgres
// '_new_provider' array type.
func (tr *typeResolver) newNewProviderArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_new_provider", "new_provider", tr.newNewProvider)
}

// newNewProviderArrayInit creates an initialized pgtype.ValueTranscoder for the
// Postgres array type '_new_provider' to encode query parameters.
func (tr *typeResolver) newNewProviderArrayInit(ps []NewProvider) pgtype.ValueTranscoder {
	dec := tr.newNewProviderArray()
	if err := dec.Set(tr.newNewProviderArrayRaw(ps)); err != nil {
		panic("encode []NewProvider: " + err.Error()) // should always succeed
	}
	return textPreferrer{ValueTranscoder: dec, typeName: "_new_provider"}
}

// newNewProviderArrayRaw returns all elements for the Postgres array type '_new_provider'
// as a slice of interface{} for use with the pgtype.Value Set method.
func (tr *typeResolver) newNewProviderArrayRaw(vs []NewProvider) []interface{} {
	elems := make([]interface{}, len(vs))
	for i, v := range vs {
		elems[i] = tr.newNewProviderRaw(v)
	}
	return elems
}

// newNewSubscriptionArray creates a new pgtype.ValueTranscoder for the Postgres
// '_new_subscription' array type.
func (tr *typeResolver) newNewSubscriptionArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_new_subscription", "new_subscription", tr.newNewSubscription)
}

// newNewSubscriptionArrayInit creates an initialized pgtype.ValueTranscoder for the
// Postgres array type '_new_subscription' to encode query parameters.
func (tr *typeResolver) newNewSubscriptionArrayInit(ps []NewSubscription) pgtype.ValueTranscoder {
	dec := tr.newNewSubscriptionArray()
	if err := dec.Set(tr.newNewSubscriptionArrayRaw(ps)); err != nil {
		panic("encode []NewSubscription: " + err.Error()) // should always succeed
	}
	return textPreferrer{ValueTranscoder: dec, typeName: "_new_subscription"}
}

// newNewSubscriptionArrayRaw returns all elements for the Postgres array type '_new_subscription'
// as a slice of interface{} for use with the pgtype.Value Set method.
func (tr *typeResolver) newNewSubscriptionArrayRaw(vs []NewSubscription) []interface{} {
	elems := make([]interface{}, len(vs))
	for i, v := range vs {
		elems[i] = tr.newNewSubscriptionRaw(v)
	}
	return elems
}

const createEventTypesSQL = `INSERT INTO evnt.event_type (
  name
) 
SELECT 
  name
FROM unnest($1::evnt.new_event_type[])
ON CONFLICT DO NOTHING
RETURNING 
  id,
  uid,
  name,
  created_at;`

type CreateEventTypesRow struct {
	ID        int32     `json:"id"`
	Uid       string    `json:"uid"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
}

// CreateEventTypes implements Querier.CreateEventTypes.
func (q *DBQuerier) CreateEventTypes(ctx context.Context, eventTypes []NewEventType) ([]CreateEventTypesRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "CreateEventTypes")
	rows, err := q.conn.Query(ctx, createEventTypesSQL, q.types.newNewEventTypeArrayInit(eventTypes))
	if err != nil {
		return nil, fmt.Errorf("query CreateEventTypes: %w", err)
	}
	defer rows.Close()
	items := []CreateEventTypesRow{}
	for rows.Next() {
		var item CreateEventTypesRow
		if err := rows.Scan(&item.ID, &item.Uid, &item.Name, &item.CreatedAt); err != nil {
			return nil, fmt.Errorf("scan CreateEventTypes row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close CreateEventTypes rows: %w", err)
	}
	return items, err
}

// CreateEventTypesBatch implements Querier.CreateEventTypesBatch.
func (q *DBQuerier) CreateEventTypesBatch(batch genericBatch, eventTypes []NewEventType) {
	batch.Queue(createEventTypesSQL, q.types.newNewEventTypeArrayInit(eventTypes))
}

// CreateEventTypesScan implements Querier.CreateEventTypesScan.
func (q *DBQuerier) CreateEventTypesScan(results pgx.BatchResults) ([]CreateEventTypesRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query CreateEventTypesBatch: %w", err)
	}
	defer rows.Close()
	items := []CreateEventTypesRow{}
	for rows.Next() {
		var item CreateEventTypesRow
		if err := rows.Scan(&item.ID, &item.Uid, &item.Name, &item.CreatedAt); err != nil {
			return nil, fmt.Errorf("scan CreateEventTypesBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close CreateEventTypesBatch rows: %w", err)
	}
	return items, err
}

const createNotificationTypesSQL = `INSERT INTO evnt.notification_type (
  name,
  provider_id
) 
SELECT 
  u.name,
  p.id
FROM unnest($1::evnt.new_notification_type[]) u
JOIN evnt.provider p ON p.uid = u.provider_uid 
ON CONFLICT DO NOTHING
RETURNING 
  id,
  uid,
  name,
  created_at;`

type CreateNotificationTypesRow struct {
	ID        int32     `json:"id"`
	Uid       string    `json:"uid"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
}

// CreateNotificationTypes implements Querier.CreateNotificationTypes.
func (q *DBQuerier) CreateNotificationTypes(ctx context.Context, notificationTypes []NewNotificationType) ([]CreateNotificationTypesRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "CreateNotificationTypes")
	rows, err := q.conn.Query(ctx, createNotificationTypesSQL, q.types.newNewNotificationTypeArrayInit(notificationTypes))
	if err != nil {
		return nil, fmt.Errorf("query CreateNotificationTypes: %w", err)
	}
	defer rows.Close()
	items := []CreateNotificationTypesRow{}
	for rows.Next() {
		var item CreateNotificationTypesRow
		if err := rows.Scan(&item.ID, &item.Uid, &item.Name, &item.CreatedAt); err != nil {
			return nil, fmt.Errorf("scan CreateNotificationTypes row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close CreateNotificationTypes rows: %w", err)
	}
	return items, err
}

// CreateNotificationTypesBatch implements Querier.CreateNotificationTypesBatch.
func (q *DBQuerier) CreateNotificationTypesBatch(batch genericBatch, notificationTypes []NewNotificationType) {
	batch.Queue(createNotificationTypesSQL, q.types.newNewNotificationTypeArrayInit(notificationTypes))
}

// CreateNotificationTypesScan implements Querier.CreateNotificationTypesScan.
func (q *DBQuerier) CreateNotificationTypesScan(results pgx.BatchResults) ([]CreateNotificationTypesRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query CreateNotificationTypesBatch: %w", err)
	}
	defer rows.Close()
	items := []CreateNotificationTypesRow{}
	for rows.Next() {
		var item CreateNotificationTypesRow
		if err := rows.Scan(&item.ID, &item.Uid, &item.Name, &item.CreatedAt); err != nil {
			return nil, fmt.Errorf("scan CreateNotificationTypesBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close CreateNotificationTypesBatch rows: %w", err)
	}
	return items, err
}

const createProvidersSQL = `INSERT INTO evnt.provider (
  name
) 
SELECT 
  name
FROM unnest($1::evnt.new_provider[])
ON CONFLICT DO NOTHING
RETURNING 
  id,
  uid,
  name,
  created_at;`

type CreateProvidersRow struct {
	ID        int32     `json:"id"`
	Uid       string    `json:"uid"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
}

// CreateProviders implements Querier.CreateProviders.
func (q *DBQuerier) CreateProviders(ctx context.Context, providers []NewProvider) ([]CreateProvidersRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "CreateProviders")
	rows, err := q.conn.Query(ctx, createProvidersSQL, q.types.newNewProviderArrayInit(providers))
	if err != nil {
		return nil, fmt.Errorf("query CreateProviders: %w", err)
	}
	defer rows.Close()
	items := []CreateProvidersRow{}
	for rows.Next() {
		var item CreateProvidersRow
		if err := rows.Scan(&item.ID, &item.Uid, &item.Name, &item.CreatedAt); err != nil {
			return nil, fmt.Errorf("scan CreateProviders row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close CreateProviders rows: %w", err)
	}
	return items, err
}

// CreateProvidersBatch implements Querier.CreateProvidersBatch.
func (q *DBQuerier) CreateProvidersBatch(batch genericBatch, providers []NewProvider) {
	batch.Queue(createProvidersSQL, q.types.newNewProviderArrayInit(providers))
}

// CreateProvidersScan implements Querier.CreateProvidersScan.
func (q *DBQuerier) CreateProvidersScan(results pgx.BatchResults) ([]CreateProvidersRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query CreateProvidersBatch: %w", err)
	}
	defer rows.Close()
	items := []CreateProvidersRow{}
	for rows.Next() {
		var item CreateProvidersRow
		if err := rows.Scan(&item.ID, &item.Uid, &item.Name, &item.CreatedAt); err != nil {
			return nil, fmt.Errorf("scan CreateProvidersBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close CreateProvidersBatch rows: %w", err)
	}
	return items, err
}

const createSubscriptionsSQL = `INSERT INTO evnt.subscription (
  tenant_id,
  metadata,
  notification_type_id
) 
SELECT 
  u.tenant_id,
  u.metadata,
  n.id
FROM unnest($1::evnt.new_subscription[]) u
JOIN evnt.notification_type n ON n.uid = u.notification_type_uid 
ON CONFLICT DO NOTHING
RETURNING 
  uid,
  tenant_id,
  metadata,
  created_at,
  updated_at,
  notification_type_id;`

type CreateSubscriptionsRow struct {
	Uid                string       `json:"uid"`
	TenantID           string       `json:"tenant_id"`
	Metadata           pgtype.JSONB `json:"metadata"`
	CreatedAt          time.Time    `json:"created_at"`
	UpdatedAt          time.Time    `json:"updated_at"`
	NotificationTypeID int32        `json:"notification_type_id"`
}

// CreateSubscriptions implements Querier.CreateSubscriptions.
func (q *DBQuerier) CreateSubscriptions(ctx context.Context, subscriptions []NewSubscription) ([]CreateSubscriptionsRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "CreateSubscriptions")
	rows, err := q.conn.Query(ctx, createSubscriptionsSQL, q.types.newNewSubscriptionArrayInit(subscriptions))
	if err != nil {
		return nil, fmt.Errorf("query CreateSubscriptions: %w", err)
	}
	defer rows.Close()
	items := []CreateSubscriptionsRow{}
	for rows.Next() {
		var item CreateSubscriptionsRow
		if err := rows.Scan(&item.Uid, &item.TenantID, &item.Metadata, &item.CreatedAt, &item.UpdatedAt, &item.NotificationTypeID); err != nil {
			return nil, fmt.Errorf("scan CreateSubscriptions row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close CreateSubscriptions rows: %w", err)
	}
	return items, err
}

// CreateSubscriptionsBatch implements Querier.CreateSubscriptionsBatch.
func (q *DBQuerier) CreateSubscriptionsBatch(batch genericBatch, subscriptions []NewSubscription) {
	batch.Queue(createSubscriptionsSQL, q.types.newNewSubscriptionArrayInit(subscriptions))
}

// CreateSubscriptionsScan implements Querier.CreateSubscriptionsScan.
func (q *DBQuerier) CreateSubscriptionsScan(results pgx.BatchResults) ([]CreateSubscriptionsRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query CreateSubscriptionsBatch: %w", err)
	}
	defer rows.Close()
	items := []CreateSubscriptionsRow{}
	for rows.Next() {
		var item CreateSubscriptionsRow
		if err := rows.Scan(&item.Uid, &item.TenantID, &item.Metadata, &item.CreatedAt, &item.UpdatedAt, &item.NotificationTypeID); err != nil {
			return nil, fmt.Errorf("scan CreateSubscriptionsBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close CreateSubscriptionsBatch rows: %w", err)
	}
	return items, err
}

const deleteSubscriptionSQL = `DELETE FROM evnt.subscription
WHERE uid = ANY($1::uuid[]);`

// DeleteSubscription implements Querier.DeleteSubscription.
func (q *DBQuerier) DeleteSubscription(ctx context.Context, ids []string) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteSubscription")
	cmdTag, err := q.conn.Exec(ctx, deleteSubscriptionSQL, ids)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query DeleteSubscription: %w", err)
	}
	return cmdTag, err
}

// DeleteSubscriptionBatch implements Querier.DeleteSubscriptionBatch.
func (q *DBQuerier) DeleteSubscriptionBatch(batch genericBatch, ids []string) {
	batch.Queue(deleteSubscriptionSQL, ids)
}

// DeleteSubscriptionScan implements Querier.DeleteSubscriptionScan.
func (q *DBQuerier) DeleteSubscriptionScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec DeleteSubscriptionBatch: %w", err)
	}
	return cmdTag, err
}

const getEventTypesSQL = `SELECT 
  id,
  uid,
  name,
  created_at
FROM evnt.event_type
WHERE uid = ANY($1::uuid[]);`

type GetEventTypesRow struct {
	ID        *int32    `json:"id"`
	Uid       string    `json:"uid"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
}

// GetEventTypes implements Querier.GetEventTypes.
func (q *DBQuerier) GetEventTypes(ctx context.Context, ids []string) ([]GetEventTypesRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "GetEventTypes")
	rows, err := q.conn.Query(ctx, getEventTypesSQL, ids)
	if err != nil {
		return nil, fmt.Errorf("query GetEventTypes: %w", err)
	}
	defer rows.Close()
	items := []GetEventTypesRow{}
	for rows.Next() {
		var item GetEventTypesRow
		if err := rows.Scan(&item.ID, &item.Uid, &item.Name, &item.CreatedAt); err != nil {
			return nil, fmt.Errorf("scan GetEventTypes row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GetEventTypes rows: %w", err)
	}
	return items, err
}

// GetEventTypesBatch implements Querier.GetEventTypesBatch.
func (q *DBQuerier) GetEventTypesBatch(batch genericBatch, ids []string) {
	batch.Queue(getEventTypesSQL, ids)
}

// GetEventTypesScan implements Querier.GetEventTypesScan.
func (q *DBQuerier) GetEventTypesScan(results pgx.BatchResults) ([]GetEventTypesRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query GetEventTypesBatch: %w", err)
	}
	defer rows.Close()
	items := []GetEventTypesRow{}
	for rows.Next() {
		var item GetEventTypesRow
		if err := rows.Scan(&item.ID, &item.Uid, &item.Name, &item.CreatedAt); err != nil {
			return nil, fmt.Errorf("scan GetEventTypesBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GetEventTypesBatch rows: %w", err)
	}
	return items, err
}

const getNotificationTypesSQL = `SELECT 
  id,
  uid,
  name,
  created_at
FROM evnt.notification_type
WHERE uid = ANY($1::uuid[]);`

type GetNotificationTypesRow struct {
	ID        *int32    `json:"id"`
	Uid       string    `json:"uid"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
}

// GetNotificationTypes implements Querier.GetNotificationTypes.
func (q *DBQuerier) GetNotificationTypes(ctx context.Context, ids []string) ([]GetNotificationTypesRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "GetNotificationTypes")
	rows, err := q.conn.Query(ctx, getNotificationTypesSQL, ids)
	if err != nil {
		return nil, fmt.Errorf("query GetNotificationTypes: %w", err)
	}
	defer rows.Close()
	items := []GetNotificationTypesRow{}
	for rows.Next() {
		var item GetNotificationTypesRow
		if err := rows.Scan(&item.ID, &item.Uid, &item.Name, &item.CreatedAt); err != nil {
			return nil, fmt.Errorf("scan GetNotificationTypes row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GetNotificationTypes rows: %w", err)
	}
	return items, err
}

// GetNotificationTypesBatch implements Querier.GetNotificationTypesBatch.
func (q *DBQuerier) GetNotificationTypesBatch(batch genericBatch, ids []string) {
	batch.Queue(getNotificationTypesSQL, ids)
}

// GetNotificationTypesScan implements Querier.GetNotificationTypesScan.
func (q *DBQuerier) GetNotificationTypesScan(results pgx.BatchResults) ([]GetNotificationTypesRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query GetNotificationTypesBatch: %w", err)
	}
	defer rows.Close()
	items := []GetNotificationTypesRow{}
	for rows.Next() {
		var item GetNotificationTypesRow
		if err := rows.Scan(&item.ID, &item.Uid, &item.Name, &item.CreatedAt); err != nil {
			return nil, fmt.Errorf("scan GetNotificationTypesBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GetNotificationTypesBatch rows: %w", err)
	}
	return items, err
}

const getProvidersSQL = `SELECT 
  id,
  uid,
  name
FROM evnt.provider
WHERE uid = ANY($1::uuid[]);`

type GetProvidersRow struct {
	ID   *int32 `json:"id"`
	Uid  string `json:"uid"`
	Name string `json:"name"`
}

// GetProviders implements Querier.GetProviders.
func (q *DBQuerier) GetProviders(ctx context.Context, ids []string) ([]GetProvidersRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "GetProviders")
	rows, err := q.conn.Query(ctx, getProvidersSQL, ids)
	if err != nil {
		return nil, fmt.Errorf("query GetProviders: %w", err)
	}
	defer rows.Close()
	items := []GetProvidersRow{}
	for rows.Next() {
		var item GetProvidersRow
		if err := rows.Scan(&item.ID, &item.Uid, &item.Name); err != nil {
			return nil, fmt.Errorf("scan GetProviders row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GetProviders rows: %w", err)
	}
	return items, err
}

// GetProvidersBatch implements Querier.GetProvidersBatch.
func (q *DBQuerier) GetProvidersBatch(batch genericBatch, ids []string) {
	batch.Queue(getProvidersSQL, ids)
}

// GetProvidersScan implements Querier.GetProvidersScan.
func (q *DBQuerier) GetProvidersScan(results pgx.BatchResults) ([]GetProvidersRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query GetProvidersBatch: %w", err)
	}
	defer rows.Close()
	items := []GetProvidersRow{}
	for rows.Next() {
		var item GetProvidersRow
		if err := rows.Scan(&item.ID, &item.Uid, &item.Name); err != nil {
			return nil, fmt.Errorf("scan GetProvidersBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GetProvidersBatch rows: %w", err)
	}
	return items, err
}

const getSubscriptionsSQL = `SELECT 
  uid,
  tenant_id,
  metadata,
  created_at,
  updated_at,
  notification_type_id
FROM evnt.subscription
WHERE uid = ANY($1::uuid[]);`

type GetSubscriptionsRow struct {
	Uid                string       `json:"uid"`
	TenantID           string       `json:"tenant_id"`
	Metadata           pgtype.JSONB `json:"metadata"`
	CreatedAt          time.Time    `json:"created_at"`
	UpdatedAt          time.Time    `json:"updated_at"`
	NotificationTypeID *int32       `json:"notification_type_id"`
}

// GetSubscriptions implements Querier.GetSubscriptions.
func (q *DBQuerier) GetSubscriptions(ctx context.Context, ids []string) ([]GetSubscriptionsRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "GetSubscriptions")
	rows, err := q.conn.Query(ctx, getSubscriptionsSQL, ids)
	if err != nil {
		return nil, fmt.Errorf("query GetSubscriptions: %w", err)
	}
	defer rows.Close()
	items := []GetSubscriptionsRow{}
	for rows.Next() {
		var item GetSubscriptionsRow
		if err := rows.Scan(&item.Uid, &item.TenantID, &item.Metadata, &item.CreatedAt, &item.UpdatedAt, &item.NotificationTypeID); err != nil {
			return nil, fmt.Errorf("scan GetSubscriptions row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GetSubscriptions rows: %w", err)
	}
	return items, err
}

// GetSubscriptionsBatch implements Querier.GetSubscriptionsBatch.
func (q *DBQuerier) GetSubscriptionsBatch(batch genericBatch, ids []string) {
	batch.Queue(getSubscriptionsSQL, ids)
}

// GetSubscriptionsScan implements Querier.GetSubscriptionsScan.
func (q *DBQuerier) GetSubscriptionsScan(results pgx.BatchResults) ([]GetSubscriptionsRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query GetSubscriptionsBatch: %w", err)
	}
	defer rows.Close()
	items := []GetSubscriptionsRow{}
	for rows.Next() {
		var item GetSubscriptionsRow
		if err := rows.Scan(&item.Uid, &item.TenantID, &item.Metadata, &item.CreatedAt, &item.UpdatedAt, &item.NotificationTypeID); err != nil {
			return nil, fmt.Errorf("scan GetSubscriptionsBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GetSubscriptionsBatch rows: %w", err)
	}
	return items, err
}

const listEventTypesSQL = `SELECT 
  id,
  uid,
  name,
  created_at
FROM evnt.event_type
WHERE $1::timestamptz IS NULL 
  OR created_at > $1
ORDER BY created_at
LIMIT $2;`

type ListEventTypesRow struct {
	ID        *int32    `json:"id"`
	Uid       string    `json:"uid"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
}

// ListEventTypes implements Querier.ListEventTypes.
func (q *DBQuerier) ListEventTypes(ctx context.Context, createdAfter time.Time, limit int) ([]ListEventTypesRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ListEventTypes")
	rows, err := q.conn.Query(ctx, listEventTypesSQL, createdAfter, limit)
	if err != nil {
		return nil, fmt.Errorf("query ListEventTypes: %w", err)
	}
	defer rows.Close()
	items := []ListEventTypesRow{}
	for rows.Next() {
		var item ListEventTypesRow
		if err := rows.Scan(&item.ID, &item.Uid, &item.Name, &item.CreatedAt); err != nil {
			return nil, fmt.Errorf("scan ListEventTypes row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListEventTypes rows: %w", err)
	}
	return items, err
}

// ListEventTypesBatch implements Querier.ListEventTypesBatch.
func (q *DBQuerier) ListEventTypesBatch(batch genericBatch, createdAfter time.Time, limit int) {
	batch.Queue(listEventTypesSQL, createdAfter, limit)
}

// ListEventTypesScan implements Querier.ListEventTypesScan.
func (q *DBQuerier) ListEventTypesScan(results pgx.BatchResults) ([]ListEventTypesRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query ListEventTypesBatch: %w", err)
	}
	defer rows.Close()
	items := []ListEventTypesRow{}
	for rows.Next() {
		var item ListEventTypesRow
		if err := rows.Scan(&item.ID, &item.Uid, &item.Name, &item.CreatedAt); err != nil {
			return nil, fmt.Errorf("scan ListEventTypesBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListEventTypesBatch rows: %w", err)
	}
	return items, err
}

const listNotificationTypesSQL = `SELECT 
  id,
  uid,
  name,
  created_at
FROM evnt.notification_type
WHERE $1::timestamptz IS NULL 
  OR created_at > $1
ORDER BY created_at
LIMIT $2;`

type ListNotificationTypesRow struct {
	ID        *int32    `json:"id"`
	Uid       string    `json:"uid"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
}

// ListNotificationTypes implements Querier.ListNotificationTypes.
func (q *DBQuerier) ListNotificationTypes(ctx context.Context, createdAfter time.Time, limit int) ([]ListNotificationTypesRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ListNotificationTypes")
	rows, err := q.conn.Query(ctx, listNotificationTypesSQL, createdAfter, limit)
	if err != nil {
		return nil, fmt.Errorf("query ListNotificationTypes: %w", err)
	}
	defer rows.Close()
	items := []ListNotificationTypesRow{}
	for rows.Next() {
		var item ListNotificationTypesRow
		if err := rows.Scan(&item.ID, &item.Uid, &item.Name, &item.CreatedAt); err != nil {
			return nil, fmt.Errorf("scan ListNotificationTypes row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListNotificationTypes rows: %w", err)
	}
	return items, err
}

// ListNotificationTypesBatch implements Querier.ListNotificationTypesBatch.
func (q *DBQuerier) ListNotificationTypesBatch(batch genericBatch, createdAfter time.Time, limit int) {
	batch.Queue(listNotificationTypesSQL, createdAfter, limit)
}

// ListNotificationTypesScan implements Querier.ListNotificationTypesScan.
func (q *DBQuerier) ListNotificationTypesScan(results pgx.BatchResults) ([]ListNotificationTypesRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query ListNotificationTypesBatch: %w", err)
	}
	defer rows.Close()
	items := []ListNotificationTypesRow{}
	for rows.Next() {
		var item ListNotificationTypesRow
		if err := rows.Scan(&item.ID, &item.Uid, &item.Name, &item.CreatedAt); err != nil {
			return nil, fmt.Errorf("scan ListNotificationTypesBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListNotificationTypesBatch rows: %w", err)
	}
	return items, err
}

const listProvidersSQL = `SELECT 
  id,
  uid,
  name,
  created_at
FROM evnt.provider
WHERE $1::timestamptz IS NULL 
  OR created_at > $1
ORDER BY created_at
LIMIT $2;`

type ListProvidersRow struct {
	ID        *int32    `json:"id"`
	Uid       string    `json:"uid"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
}

// ListProviders implements Querier.ListProviders.
func (q *DBQuerier) ListProviders(ctx context.Context, createdAfter time.Time, limit int) ([]ListProvidersRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ListProviders")
	rows, err := q.conn.Query(ctx, listProvidersSQL, createdAfter, limit)
	if err != nil {
		return nil, fmt.Errorf("query ListProviders: %w", err)
	}
	defer rows.Close()
	items := []ListProvidersRow{}
	for rows.Next() {
		var item ListProvidersRow
		if err := rows.Scan(&item.ID, &item.Uid, &item.Name, &item.CreatedAt); err != nil {
			return nil, fmt.Errorf("scan ListProviders row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListProviders rows: %w", err)
	}
	return items, err
}

// ListProvidersBatch implements Querier.ListProvidersBatch.
func (q *DBQuerier) ListProvidersBatch(batch genericBatch, createdAfter time.Time, limit int) {
	batch.Queue(listProvidersSQL, createdAfter, limit)
}

// ListProvidersScan implements Querier.ListProvidersScan.
func (q *DBQuerier) ListProvidersScan(results pgx.BatchResults) ([]ListProvidersRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query ListProvidersBatch: %w", err)
	}
	defer rows.Close()
	items := []ListProvidersRow{}
	for rows.Next() {
		var item ListProvidersRow
		if err := rows.Scan(&item.ID, &item.Uid, &item.Name, &item.CreatedAt); err != nil {
			return nil, fmt.Errorf("scan ListProvidersBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListProvidersBatch rows: %w", err)
	}
	return items, err
}

const listSubscriptionsSQL = `SELECT 
  uid,
  tenant_id,
  metadata,
  created_at,
  updated_at,
  notification_type_id
FROM evnt.subscription
WHERE $1::timestamptz IS NULL 
  OR created_at > $1
ORDER BY created_at
LIMIT $2;`

type ListSubscriptionsRow struct {
	Uid                string       `json:"uid"`
	TenantID           string       `json:"tenant_id"`
	Metadata           pgtype.JSONB `json:"metadata"`
	CreatedAt          time.Time    `json:"created_at"`
	UpdatedAt          time.Time    `json:"updated_at"`
	NotificationTypeID *int32       `json:"notification_type_id"`
}

// ListSubscriptions implements Querier.ListSubscriptions.
func (q *DBQuerier) ListSubscriptions(ctx context.Context, createdAfter time.Time, limit int) ([]ListSubscriptionsRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ListSubscriptions")
	rows, err := q.conn.Query(ctx, listSubscriptionsSQL, createdAfter, limit)
	if err != nil {
		return nil, fmt.Errorf("query ListSubscriptions: %w", err)
	}
	defer rows.Close()
	items := []ListSubscriptionsRow{}
	for rows.Next() {
		var item ListSubscriptionsRow
		if err := rows.Scan(&item.Uid, &item.TenantID, &item.Metadata, &item.CreatedAt, &item.UpdatedAt, &item.NotificationTypeID); err != nil {
			return nil, fmt.Errorf("scan ListSubscriptions row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListSubscriptions rows: %w", err)
	}
	return items, err
}

// ListSubscriptionsBatch implements Querier.ListSubscriptionsBatch.
func (q *DBQuerier) ListSubscriptionsBatch(batch genericBatch, createdAfter time.Time, limit int) {
	batch.Queue(listSubscriptionsSQL, createdAfter, limit)
}

// ListSubscriptionsScan implements Querier.ListSubscriptionsScan.
func (q *DBQuerier) ListSubscriptionsScan(results pgx.BatchResults) ([]ListSubscriptionsRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query ListSubscriptionsBatch: %w", err)
	}
	defer rows.Close()
	items := []ListSubscriptionsRow{}
	for rows.Next() {
		var item ListSubscriptionsRow
		if err := rows.Scan(&item.Uid, &item.TenantID, &item.Metadata, &item.CreatedAt, &item.UpdatedAt, &item.NotificationTypeID); err != nil {
			return nil, fmt.Errorf("scan ListSubscriptionsBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListSubscriptionsBatch rows: %w", err)
	}
	return items, err
}

const listEventSubscriptionsSQL = `WITH filtered AS (
  SELECT 
    s.uid,
    en.transform,
    e.id  AS event_type_id,
    e.uid AS event_type_uid,
    n.uid AS notification_type_uid
  FROM evnt.event_type e
  LEFT JOIN evnt.event_notification en
    ON en.event_type_id = e.id
  LEFT JOIN evnt.notification_type n
    ON en.notification_type_id = n.id
  LEFT JOIN evnt.subscription s
    ON n.id = s.notification_type_id
  WHERE e.uid = $1
    AND ($2 = '' 
      OR s.tenant_id = $2)
) SELECT 
  s.uid,
  s.tenant_id,
  s.metadata,
  s.created_at,
  s.updated_at,
  s.notification_type_id,
  f.transform,
  f.event_type_id,
  f.event_type_uid,
  f.notification_type_uid
FROM evnt.subscription s 
INNER JOIN filtered f
  ON s.uid = f.uid
WHERE s.created_at > $3
ORDER BY s.created_at
LIMIT $4;`

type ListEventSubscriptionsParams struct {
	Event        string
	TenantID     string
	CreatedAfter time.Time
	Limit        int
}

type ListEventSubscriptionsRow struct {
	Uid                 string       `json:"uid"`
	TenantID            string       `json:"tenant_id"`
	Metadata            pgtype.JSONB `json:"metadata"`
	CreatedAt           time.Time    `json:"created_at"`
	UpdatedAt           time.Time    `json:"updated_at"`
	NotificationTypeID  *int32       `json:"notification_type_id"`
	Transform           string       `json:"transform"`
	EventTypeID         *int32       `json:"event_type_id"`
	EventTypeUid        string       `json:"event_type_uid"`
	NotificationTypeUid string       `json:"notification_type_uid"`
}

// ListEventSubscriptions implements Querier.ListEventSubscriptions.
func (q *DBQuerier) ListEventSubscriptions(ctx context.Context, params ListEventSubscriptionsParams) ([]ListEventSubscriptionsRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ListEventSubscriptions")
	rows, err := q.conn.Query(ctx, listEventSubscriptionsSQL, params.Event, params.TenantID, params.CreatedAfter, params.Limit)
	if err != nil {
		return nil, fmt.Errorf("query ListEventSubscriptions: %w", err)
	}
	defer rows.Close()
	items := []ListEventSubscriptionsRow{}
	for rows.Next() {
		var item ListEventSubscriptionsRow
		if err := rows.Scan(&item.Uid, &item.TenantID, &item.Metadata, &item.CreatedAt, &item.UpdatedAt, &item.NotificationTypeID, &item.Transform, &item.EventTypeID, &item.EventTypeUid, &item.NotificationTypeUid); err != nil {
			return nil, fmt.Errorf("scan ListEventSubscriptions row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListEventSubscriptions rows: %w", err)
	}
	return items, err
}

// ListEventSubscriptionsBatch implements Querier.ListEventSubscriptionsBatch.
func (q *DBQuerier) ListEventSubscriptionsBatch(batch genericBatch, params ListEventSubscriptionsParams) {
	batch.Queue(listEventSubscriptionsSQL, params.Event, params.TenantID, params.CreatedAfter, params.Limit)
}

// ListEventSubscriptionsScan implements Querier.ListEventSubscriptionsScan.
func (q *DBQuerier) ListEventSubscriptionsScan(results pgx.BatchResults) ([]ListEventSubscriptionsRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query ListEventSubscriptionsBatch: %w", err)
	}
	defer rows.Close()
	items := []ListEventSubscriptionsRow{}
	for rows.Next() {
		var item ListEventSubscriptionsRow
		if err := rows.Scan(&item.Uid, &item.TenantID, &item.Metadata, &item.CreatedAt, &item.UpdatedAt, &item.NotificationTypeID, &item.Transform, &item.EventTypeID, &item.EventTypeUid, &item.NotificationTypeUid); err != nil {
			return nil, fmt.Errorf("scan ListEventSubscriptionsBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close ListEventSubscriptionsBatch rows: %w", err)
	}
	return items, err
}

// textPreferrer wraps a pgtype.ValueTranscoder and sets the preferred encoding
// format to text instead binary (the default). pggen uses the text format
// when the OID is unknownOID because the binary format requires the OID.
// Typically occurs if the results from QueryAllDataTypes aren't passed to
// NewQuerierConfig.
type textPreferrer struct {
	pgtype.ValueTranscoder
	typeName string
}

// PreferredParamFormat implements pgtype.ParamFormatPreferrer.
func (t textPreferrer) PreferredParamFormat() int16 { return pgtype.TextFormatCode }

func (t textPreferrer) NewTypeValue() pgtype.Value {
	return textPreferrer{ValueTranscoder: pgtype.NewValue(t.ValueTranscoder).(pgtype.ValueTranscoder), typeName: t.typeName}
}

func (t textPreferrer) TypeName() string {
	return t.typeName
}

// unknownOID means we don't know the OID for a type. This is okay for decoding
// because pgx call DecodeText or DecodeBinary without requiring the OID. For
// encoding parameters, pggen uses textPreferrer if the OID is unknown.
const unknownOID = 0
