// Package eventsv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package eventsv1

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	Code   *int    `json:"code,omitempty"`
	Index  *string `json:"index,omitempty"`
	Reason *string `json:"reason,omitempty"`
}

// NewSubscription defines model for NewSubscription.
type NewSubscription struct {
	NotificationTypeId string `json:"notificationTypeId"`
}

// NewWebHookEndpoint defines model for NewWebHookEndpoint.
type NewWebHookEndpoint struct {
	Channels    *[]string `json:"channels,omitempty"`
	Description *string   `json:"description,omitempty"`
	Disabled    *bool     `json:"disabled,omitempty"`
	FilterTypes *[]string `json:"filterTypes,omitempty"`
	Metadata    *string   `json:"metadata,omitempty"`
	RateLimit   *int32    `json:"rateLimit,omitempty"`
	Secret      *string   `json:"secret,omitempty"`
	Uid         *string   `json:"uid,omitempty"`
	Url         string    `json:"url"`
}

// NewWebHookMessage defines model for NewWebHookMessage.
type NewWebHookMessage struct {
	Channels        *[]string `json:"channels,omitempty"`
	EventId         *string   `json:"eventId,omitempty"`
	EventType       string    `json:"eventType"`
	Payload         string    `json:"payload"`
	RetentionPeriod *int64    `json:"retentionPeriod,omitempty"`
	Tags            *[]string `json:"tags,omitempty"`
}

// NotificationType defines model for NotificationType.
type NotificationType struct {
	Id         string    `json:"id"`
	Name       string    `json:"name"`
	Provider   *Provider `json:"provider,omitempty"`
	Subscribed bool      `json:"subscribed"`
}

// PageInfo defines model for PageInfo.
type PageInfo struct {
	Done bool    `json:"done"`
	Next *string `json:"next,omitempty"`
	Prev *string `json:"prev,omitempty"`
}

// Provider defines model for Provider.
type Provider struct {
	Id                string              `json:"id"`
	Name              string              `json:"name"`
	NotificationTypes *[]NotificationType `json:"notificationTypes,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	CreatedAt          time.Time         `json:"createdAt"`
	Id                 string            `json:"id"`
	NotificationType   *NotificationType `json:"notificationType,omitempty"`
	NotificationTypeId string            `json:"notificationTypeId"`
}

// WebHookAttempt Message Attempt to an Endpoint
type WebHookAttempt struct {
	EndpointId         string    `json:"endpointId"`
	Id                 string    `json:"id"`
	MsgId              string    `json:"msgId"`
	Response           string    `json:"response"`
	ResponseStatusCode int32     `json:"responseStatusCode"`
	Status             string    `json:"status"`
	Timestamp          time.Time `json:"timestamp"`
	TriggerType        string    `json:"triggerType"`
	Url                string    `json:"url"`
}

// WebHookEndpoint web-hook endpoint
type WebHookEndpoint struct {
	Channels    []string  `json:"channels"`
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Disabled    *bool     `json:"disabled,omitempty"`
	FilterTypes []string  `json:"filterTypes"`

	// Id Unique identifier for the given endpoint.
	Id        string  `json:"id"`
	Metadata  string  `json:"metadata"`
	RateLimit *int32  `json:"rateLimit,omitempty"`
	Uid       *string `json:"uid,omitempty"`
	Url       string  `json:"url"`
}

// WebHookMessage defines model for WebHookMessage.
type WebHookMessage struct {
	Channels  []string  `json:"channels"`
	CreatedAt time.Time `json:"createdAt"`
	EventId   *string   `json:"eventId,omitempty"`
	EventType string    `json:"eventType"`
	Id        *string   `json:"id,omitempty"`
	Payload   string    `json:"payload"`
}

// WebHookType defines model for WebHookType.
type WebHookType struct {
	CreatedAt   time.Time          `json:"createdAt"`
	Description string             `json:"description"`
	Name        string             `json:"name"`
	Schemas     openapi_types.File `json:"schemas"`
	UpdatedAt   time.Time          `json:"updatedAt"`
}

// AttemptId defines model for attemptId.
type AttemptId = string

// Cursor defines model for cursor.
type Cursor = string

// EndpointId defines model for endpointId.
type EndpointId = string

// Limit defines model for limit.
type Limit = int32

// MsgId defines model for msgId.
type MsgId = string

// ProviderId defines model for providerId.
type ProviderId = string

// SubscriptionId defines model for subscriptionId.
type SubscriptionId = string

// TenantId defines model for tenantId.
type TenantId = string

// NotificationTypeList defines model for NotificationTypeList.
type NotificationTypeList struct {
	Cursor PageInfo           `json:"cursor"`
	Data   []NotificationType `json:"data"`
}

// ProviderList defines model for ProviderList.
type ProviderList struct {
	Cursor PageInfo   `json:"cursor"`
	Data   []Provider `json:"data"`
}

// SubscriptionList defines model for SubscriptionList.
type SubscriptionList struct {
	Cursor PageInfo       `json:"cursor"`
	Data   []Subscription `json:"data"`
}

// SubscriptionResult defines model for SubscriptionResult.
type SubscriptionResult struct {
	Data   []Subscription `json:"data"`
	Errors *[]Error       `json:"errors,omitempty"`
}

// WebHookAttemptList defines model for WebHookAttemptList.
type WebHookAttemptList struct {
	Cursor PageInfo         `json:"cursor"`
	Data   []WebHookAttempt `json:"data"`
}

// WebHookEndpointList defines model for WebHookEndpointList.
type WebHookEndpointList struct {
	Cursor PageInfo          `json:"cursor"`
	Data   []WebHookEndpoint `json:"data"`
}

// WebHookEndpointResult defines model for WebHookEndpointResult.
type WebHookEndpointResult struct {
	Data   []WebHookEndpoint `json:"data"`
	Errors *[]Error          `json:"errors,omitempty"`
}

// WebHookMessageList defines model for WebHookMessageList.
type WebHookMessageList struct {
	Cursor PageInfo         `json:"cursor"`
	Data   []WebHookMessage `json:"data"`
}

// WebHookMessageResult defines model for WebHookMessageResult.
type WebHookMessageResult struct {
	Data   []WebHookMessage `json:"data"`
	Errors *[]Error         `json:"errors,omitempty"`
}

// WebHookTypeList defines model for WebHookTypeList.
type WebHookTypeList struct {
	Cursor PageInfo      `json:"cursor"`
	Data   []WebHookType `json:"data"`
}

// NewSubscriptions defines model for NewSubscriptions.
type NewSubscriptions = []NewSubscription

// NewWebHookEndpoints defines model for NewWebHookEndpoints.
type NewWebHookEndpoints = []NewWebHookEndpoint

// NewWebHookMessages defines model for NewWebHookMessages.
type NewWebHookMessages = []NewWebHookMessage

// ListNotificationTypesParams defines parameters for ListNotificationTypes.
type ListNotificationTypesParams struct {
	Limit    *Limit   `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor   *Cursor  `form:"cursor,omitempty" json:"cursor,omitempty"`
	TenantId TenantId `json:"tenantId"`
}

// ListProvidersParams defines parameters for ListProviders.
type ListProvidersParams struct {
	Limit    *Limit   `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor   *Cursor  `form:"cursor,omitempty" json:"cursor,omitempty"`
	TenantId TenantId `json:"tenantId"`
}

// GetProviderParams defines parameters for GetProvider.
type GetProviderParams struct {
	TenantId TenantId `json:"tenantId"`
}

// ListSubscriptionsParams defines parameters for ListSubscriptions.
type ListSubscriptionsParams struct {
	Limit    *Limit   `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor   *Cursor  `form:"cursor,omitempty" json:"cursor,omitempty"`
	TenantId TenantId `json:"tenantId"`
}

// CreateSubscriptionsJSONBody defines parameters for CreateSubscriptions.
type CreateSubscriptionsJSONBody = []NewSubscription

// GetSubscriptionParams defines parameters for GetSubscription.
type GetSubscriptionParams struct {
	TenantId TenantId `json:"tenantId"`
}

// ListWebhookEndpointsParams defines parameters for ListWebhookEndpoints.
type ListWebhookEndpointsParams struct {
	Limit    *Limit   `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor   *Cursor  `form:"cursor,omitempty" json:"cursor,omitempty"`
	TenantId TenantId `json:"tenantId"`
}

// CreateWebhookEndpointsJSONBody defines parameters for CreateWebhookEndpoints.
type CreateWebhookEndpointsJSONBody = []NewWebHookEndpoint

// CreateWebhookEndpointsParams defines parameters for CreateWebhookEndpoints.
type CreateWebhookEndpointsParams struct {
	TenantId TenantId `json:"tenantId"`
}

// DeleteWebhookEndpointParams defines parameters for DeleteWebhookEndpoint.
type DeleteWebhookEndpointParams struct {
	TenantId TenantId `json:"tenantId"`
}

// GetWebhookEndpointParams defines parameters for GetWebhookEndpoint.
type GetWebhookEndpointParams struct {
	TenantId TenantId `json:"tenantId"`
}

// ListWebhookEndpointAttemptsParams defines parameters for ListWebhookEndpointAttempts.
type ListWebhookEndpointAttemptsParams struct {
	Limit    *Limit   `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor   *Cursor  `form:"cursor,omitempty" json:"cursor,omitempty"`
	TenantId TenantId `json:"tenantId"`
}

// ListWebhookEndpointMessagesParams defines parameters for ListWebhookEndpointMessages.
type ListWebhookEndpointMessagesParams struct {
	Limit    *Limit   `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor   *Cursor  `form:"cursor,omitempty" json:"cursor,omitempty"`
	TenantId TenantId `json:"tenantId"`
}

// ListWebhookEndpointMessageAttemptsParams defines parameters for ListWebhookEndpointMessageAttempts.
type ListWebhookEndpointMessageAttemptsParams struct {
	Limit    *Limit   `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor   *Cursor  `form:"cursor,omitempty" json:"cursor,omitempty"`
	TenantId TenantId `json:"tenantId"`
}

// ListWebhookMessagesParams defines parameters for ListWebhookMessages.
type ListWebhookMessagesParams struct {
	Limit    *Limit   `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor   *Cursor  `form:"cursor,omitempty" json:"cursor,omitempty"`
	TenantId TenantId `json:"tenantId"`
}

// CreateWebhookMessagesJSONBody defines parameters for CreateWebhookMessages.
type CreateWebhookMessagesJSONBody = []NewWebHookMessage

// CreateWebhookMessagesParams defines parameters for CreateWebhookMessages.
type CreateWebhookMessagesParams struct {
	TenantId TenantId `json:"tenantId"`
}

// GetWebhookMessageParams defines parameters for GetWebhookMessage.
type GetWebhookMessageParams struct {
	TenantId TenantId `json:"tenantId"`
}

// ListWebhookMessageAttemptsParams defines parameters for ListWebhookMessageAttempts.
type ListWebhookMessageAttemptsParams struct {
	Limit    *Limit   `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor   *Cursor  `form:"cursor,omitempty" json:"cursor,omitempty"`
	TenantId TenantId `json:"tenantId"`
}

// ExpungeWebhookMessageParams defines parameters for ExpungeWebhookMessage.
type ExpungeWebhookMessageParams struct {
	TenantId TenantId `json:"tenantId"`
}

// GetWebhookMessageAttemptParams defines parameters for GetWebhookMessageAttempt.
type GetWebhookMessageAttemptParams struct {
	TenantId TenantId `json:"tenantId"`
}

// ListWebhookTypesParams defines parameters for ListWebhookTypes.
type ListWebhookTypesParams struct {
	Limit  *Limit  `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// CreateSubscriptionsJSONRequestBody defines body for CreateSubscriptions for application/json ContentType.
type CreateSubscriptionsJSONRequestBody = CreateSubscriptionsJSONBody

// CreateWebhookEndpointsJSONRequestBody defines body for CreateWebhookEndpoints for application/json ContentType.
type CreateWebhookEndpointsJSONRequestBody = CreateWebhookEndpointsJSONBody

// CreateWebhookMessagesJSONRequestBody defines body for CreateWebhookMessages for application/json ContentType.
type CreateWebhookMessagesJSONRequestBody = CreateWebhookMessagesJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListNotificationTypes request
	ListNotificationTypes(ctx context.Context, params *ListNotificationTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListProviders request
	ListProviders(ctx context.Context, params *ListProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProvider request
	GetProvider(ctx context.Context, providerId ProviderId, params *GetProviderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSubscriptions request
	ListSubscriptions(ctx context.Context, params *ListSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSubscriptionsWithBody request with any body
	CreateSubscriptionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSubscriptions(ctx context.Context, body CreateSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSubscription request
	DeleteSubscription(ctx context.Context, subscriptionId SubscriptionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSubscription request
	GetSubscription(ctx context.Context, subscriptionId SubscriptionId, params *GetSubscriptionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWebhookEndpoints request
	ListWebhookEndpoints(ctx context.Context, params *ListWebhookEndpointsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWebhookEndpointsWithBody request with any body
	CreateWebhookEndpointsWithBody(ctx context.Context, params *CreateWebhookEndpointsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWebhookEndpoints(ctx context.Context, params *CreateWebhookEndpointsParams, body CreateWebhookEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWebhookEndpoint request
	DeleteWebhookEndpoint(ctx context.Context, endpointId EndpointId, params *DeleteWebhookEndpointParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWebhookEndpoint request
	GetWebhookEndpoint(ctx context.Context, endpointId EndpointId, params *GetWebhookEndpointParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWebhookEndpointAttempts request
	ListWebhookEndpointAttempts(ctx context.Context, endpointId EndpointId, params *ListWebhookEndpointAttemptsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWebhookEndpointMessages request
	ListWebhookEndpointMessages(ctx context.Context, endpointId EndpointId, params *ListWebhookEndpointMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWebhookEndpointMessageAttempts request
	ListWebhookEndpointMessageAttempts(ctx context.Context, endpointId EndpointId, msgId MsgId, params *ListWebhookEndpointMessageAttemptsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWebhookMessages request
	ListWebhookMessages(ctx context.Context, params *ListWebhookMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWebhookMessagesWithBody request with any body
	CreateWebhookMessagesWithBody(ctx context.Context, params *CreateWebhookMessagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWebhookMessages(ctx context.Context, params *CreateWebhookMessagesParams, body CreateWebhookMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWebhookMessage request
	GetWebhookMessage(ctx context.Context, msgId MsgId, params *GetWebhookMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWebhookMessageAttempts request
	ListWebhookMessageAttempts(ctx context.Context, msgId MsgId, params *ListWebhookMessageAttemptsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExpungeWebhookMessage request
	ExpungeWebhookMessage(ctx context.Context, msgId MsgId, attemptId AttemptId, params *ExpungeWebhookMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWebhookMessageAttempt request
	GetWebhookMessageAttempt(ctx context.Context, msgId MsgId, attemptId AttemptId, params *GetWebhookMessageAttemptParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWebhookTypes request
	ListWebhookTypes(ctx context.Context, params *ListWebhookTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListNotificationTypes(ctx context.Context, params *ListNotificationTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListNotificationTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListProviders(ctx context.Context, params *ListProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProvidersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProvider(ctx context.Context, providerId ProviderId, params *GetProviderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProviderRequest(c.Server, providerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSubscriptions(ctx context.Context, params *ListSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSubscriptionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSubscriptionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSubscriptionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSubscriptions(ctx context.Context, body CreateSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSubscriptionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSubscription(ctx context.Context, subscriptionId SubscriptionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSubscriptionRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubscription(ctx context.Context, subscriptionId SubscriptionId, params *GetSubscriptionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSubscriptionRequest(c.Server, subscriptionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWebhookEndpoints(ctx context.Context, params *ListWebhookEndpointsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWebhookEndpointsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWebhookEndpointsWithBody(ctx context.Context, params *CreateWebhookEndpointsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWebhookEndpointsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWebhookEndpoints(ctx context.Context, params *CreateWebhookEndpointsParams, body CreateWebhookEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWebhookEndpointsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWebhookEndpoint(ctx context.Context, endpointId EndpointId, params *DeleteWebhookEndpointParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWebhookEndpointRequest(c.Server, endpointId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebhookEndpoint(ctx context.Context, endpointId EndpointId, params *GetWebhookEndpointParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebhookEndpointRequest(c.Server, endpointId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWebhookEndpointAttempts(ctx context.Context, endpointId EndpointId, params *ListWebhookEndpointAttemptsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWebhookEndpointAttemptsRequest(c.Server, endpointId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWebhookEndpointMessages(ctx context.Context, endpointId EndpointId, params *ListWebhookEndpointMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWebhookEndpointMessagesRequest(c.Server, endpointId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWebhookEndpointMessageAttempts(ctx context.Context, endpointId EndpointId, msgId MsgId, params *ListWebhookEndpointMessageAttemptsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWebhookEndpointMessageAttemptsRequest(c.Server, endpointId, msgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWebhookMessages(ctx context.Context, params *ListWebhookMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWebhookMessagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWebhookMessagesWithBody(ctx context.Context, params *CreateWebhookMessagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWebhookMessagesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWebhookMessages(ctx context.Context, params *CreateWebhookMessagesParams, body CreateWebhookMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWebhookMessagesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebhookMessage(ctx context.Context, msgId MsgId, params *GetWebhookMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebhookMessageRequest(c.Server, msgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWebhookMessageAttempts(ctx context.Context, msgId MsgId, params *ListWebhookMessageAttemptsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWebhookMessageAttemptsRequest(c.Server, msgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExpungeWebhookMessage(ctx context.Context, msgId MsgId, attemptId AttemptId, params *ExpungeWebhookMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExpungeWebhookMessageRequest(c.Server, msgId, attemptId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebhookMessageAttempt(ctx context.Context, msgId MsgId, attemptId AttemptId, params *GetWebhookMessageAttemptParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebhookMessageAttemptRequest(c.Server, msgId, attemptId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWebhookTypes(ctx context.Context, params *ListWebhookTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWebhookTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListNotificationTypesRequest generates requests for ListNotificationTypes
func NewListNotificationTypesRequest(server string, params *ListNotificationTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notification-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewListProvidersRequest generates requests for ListProviders
func NewListProvidersRequest(server string, params *ListProvidersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewGetProviderRequest generates requests for GetProvider
func NewGetProviderRequest(server string, providerId ProviderId, params *GetProviderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "providerId", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewListSubscriptionsRequest generates requests for ListSubscriptions
func NewListSubscriptionsRequest(server string, params *ListSubscriptionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewCreateSubscriptionsRequest calls the generic CreateSubscriptions builder with application/json body
func NewCreateSubscriptionsRequest(server string, body CreateSubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSubscriptionsRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSubscriptionsRequestWithBody generates requests for CreateSubscriptions with any type of body
func NewCreateSubscriptionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSubscriptionRequest generates requests for DeleteSubscription
func NewDeleteSubscriptionRequest(server string, subscriptionId SubscriptionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSubscriptionRequest generates requests for GetSubscription
func NewGetSubscriptionRequest(server string, subscriptionId SubscriptionId, params *GetSubscriptionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewListWebhookEndpointsRequest generates requests for ListWebhookEndpoints
func NewListWebhookEndpointsRequest(server string, params *ListWebhookEndpointsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhoook/endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewCreateWebhookEndpointsRequest calls the generic CreateWebhookEndpoints builder with application/json body
func NewCreateWebhookEndpointsRequest(server string, params *CreateWebhookEndpointsParams, body CreateWebhookEndpointsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWebhookEndpointsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateWebhookEndpointsRequestWithBody generates requests for CreateWebhookEndpoints with any type of body
func NewCreateWebhookEndpointsRequestWithBody(server string, params *CreateWebhookEndpointsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhoook/endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewDeleteWebhookEndpointRequest generates requests for DeleteWebhookEndpoint
func NewDeleteWebhookEndpointRequest(server string, endpointId EndpointId, params *DeleteWebhookEndpointParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhoook/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewGetWebhookEndpointRequest generates requests for GetWebhookEndpoint
func NewGetWebhookEndpointRequest(server string, endpointId EndpointId, params *GetWebhookEndpointParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhoook/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewListWebhookEndpointAttemptsRequest generates requests for ListWebhookEndpointAttempts
func NewListWebhookEndpointAttemptsRequest(server string, endpointId EndpointId, params *ListWebhookEndpointAttemptsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhoook/endpoints/%s/attempts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewListWebhookEndpointMessagesRequest generates requests for ListWebhookEndpointMessages
func NewListWebhookEndpointMessagesRequest(server string, endpointId EndpointId, params *ListWebhookEndpointMessagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhoook/endpoints/%s/messages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewListWebhookEndpointMessageAttemptsRequest generates requests for ListWebhookEndpointMessageAttempts
func NewListWebhookEndpointMessageAttemptsRequest(server string, endpointId EndpointId, msgId MsgId, params *ListWebhookEndpointMessageAttemptsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "msgId", runtime.ParamLocationPath, msgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhoook/endpoints/%s/messages/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewListWebhookMessagesRequest generates requests for ListWebhookMessages
func NewListWebhookMessagesRequest(server string, params *ListWebhookMessagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhoook/messages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewCreateWebhookMessagesRequest calls the generic CreateWebhookMessages builder with application/json body
func NewCreateWebhookMessagesRequest(server string, params *CreateWebhookMessagesParams, body CreateWebhookMessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWebhookMessagesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateWebhookMessagesRequestWithBody generates requests for CreateWebhookMessages with any type of body
func NewCreateWebhookMessagesRequestWithBody(server string, params *CreateWebhookMessagesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhoook/messages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewGetWebhookMessageRequest generates requests for GetWebhookMessage
func NewGetWebhookMessageRequest(server string, msgId MsgId, params *GetWebhookMessageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "msgId", runtime.ParamLocationPath, msgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhoook/messages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewListWebhookMessageAttemptsRequest generates requests for ListWebhookMessageAttempts
func NewListWebhookMessageAttemptsRequest(server string, msgId MsgId, params *ListWebhookMessageAttemptsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "msgId", runtime.ParamLocationPath, msgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhoook/messages/%s/attempts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewExpungeWebhookMessageRequest generates requests for ExpungeWebhookMessage
func NewExpungeWebhookMessageRequest(server string, msgId MsgId, attemptId AttemptId, params *ExpungeWebhookMessageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "msgId", runtime.ParamLocationPath, msgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attemptId", runtime.ParamLocationPath, attemptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhoook/messages/%s/attempts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewGetWebhookMessageAttemptRequest generates requests for GetWebhookMessageAttempt
func NewGetWebhookMessageAttemptRequest(server string, msgId MsgId, attemptId AttemptId, params *GetWebhookMessageAttemptParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "msgId", runtime.ParamLocationPath, msgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attemptId", runtime.ParamLocationPath, attemptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhoook/messages/%s/attempts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewListWebhookTypesRequest generates requests for ListWebhookTypes
func NewListWebhookTypesRequest(server string, params *ListWebhookTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhoook/types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListNotificationTypesWithResponse request
	ListNotificationTypesWithResponse(ctx context.Context, params *ListNotificationTypesParams, reqEditors ...RequestEditorFn) (*ListNotificationTypesResponse, error)

	// ListProvidersWithResponse request
	ListProvidersWithResponse(ctx context.Context, params *ListProvidersParams, reqEditors ...RequestEditorFn) (*ListProvidersResponse, error)

	// GetProviderWithResponse request
	GetProviderWithResponse(ctx context.Context, providerId ProviderId, params *GetProviderParams, reqEditors ...RequestEditorFn) (*GetProviderResponse, error)

	// ListSubscriptionsWithResponse request
	ListSubscriptionsWithResponse(ctx context.Context, params *ListSubscriptionsParams, reqEditors ...RequestEditorFn) (*ListSubscriptionsResponse, error)

	// CreateSubscriptionsWithBodyWithResponse request with any body
	CreateSubscriptionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSubscriptionsResponse, error)

	CreateSubscriptionsWithResponse(ctx context.Context, body CreateSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSubscriptionsResponse, error)

	// DeleteSubscriptionWithResponse request
	DeleteSubscriptionWithResponse(ctx context.Context, subscriptionId SubscriptionId, reqEditors ...RequestEditorFn) (*DeleteSubscriptionResponse, error)

	// GetSubscriptionWithResponse request
	GetSubscriptionWithResponse(ctx context.Context, subscriptionId SubscriptionId, params *GetSubscriptionParams, reqEditors ...RequestEditorFn) (*GetSubscriptionResponse, error)

	// ListWebhookEndpointsWithResponse request
	ListWebhookEndpointsWithResponse(ctx context.Context, params *ListWebhookEndpointsParams, reqEditors ...RequestEditorFn) (*ListWebhookEndpointsResponse, error)

	// CreateWebhookEndpointsWithBodyWithResponse request with any body
	CreateWebhookEndpointsWithBodyWithResponse(ctx context.Context, params *CreateWebhookEndpointsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWebhookEndpointsResponse, error)

	CreateWebhookEndpointsWithResponse(ctx context.Context, params *CreateWebhookEndpointsParams, body CreateWebhookEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWebhookEndpointsResponse, error)

	// DeleteWebhookEndpointWithResponse request
	DeleteWebhookEndpointWithResponse(ctx context.Context, endpointId EndpointId, params *DeleteWebhookEndpointParams, reqEditors ...RequestEditorFn) (*DeleteWebhookEndpointResponse, error)

	// GetWebhookEndpointWithResponse request
	GetWebhookEndpointWithResponse(ctx context.Context, endpointId EndpointId, params *GetWebhookEndpointParams, reqEditors ...RequestEditorFn) (*GetWebhookEndpointResponse, error)

	// ListWebhookEndpointAttemptsWithResponse request
	ListWebhookEndpointAttemptsWithResponse(ctx context.Context, endpointId EndpointId, params *ListWebhookEndpointAttemptsParams, reqEditors ...RequestEditorFn) (*ListWebhookEndpointAttemptsResponse, error)

	// ListWebhookEndpointMessagesWithResponse request
	ListWebhookEndpointMessagesWithResponse(ctx context.Context, endpointId EndpointId, params *ListWebhookEndpointMessagesParams, reqEditors ...RequestEditorFn) (*ListWebhookEndpointMessagesResponse, error)

	// ListWebhookEndpointMessageAttemptsWithResponse request
	ListWebhookEndpointMessageAttemptsWithResponse(ctx context.Context, endpointId EndpointId, msgId MsgId, params *ListWebhookEndpointMessageAttemptsParams, reqEditors ...RequestEditorFn) (*ListWebhookEndpointMessageAttemptsResponse, error)

	// ListWebhookMessagesWithResponse request
	ListWebhookMessagesWithResponse(ctx context.Context, params *ListWebhookMessagesParams, reqEditors ...RequestEditorFn) (*ListWebhookMessagesResponse, error)

	// CreateWebhookMessagesWithBodyWithResponse request with any body
	CreateWebhookMessagesWithBodyWithResponse(ctx context.Context, params *CreateWebhookMessagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWebhookMessagesResponse, error)

	CreateWebhookMessagesWithResponse(ctx context.Context, params *CreateWebhookMessagesParams, body CreateWebhookMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWebhookMessagesResponse, error)

	// GetWebhookMessageWithResponse request
	GetWebhookMessageWithResponse(ctx context.Context, msgId MsgId, params *GetWebhookMessageParams, reqEditors ...RequestEditorFn) (*GetWebhookMessageResponse, error)

	// ListWebhookMessageAttemptsWithResponse request
	ListWebhookMessageAttemptsWithResponse(ctx context.Context, msgId MsgId, params *ListWebhookMessageAttemptsParams, reqEditors ...RequestEditorFn) (*ListWebhookMessageAttemptsResponse, error)

	// ExpungeWebhookMessageWithResponse request
	ExpungeWebhookMessageWithResponse(ctx context.Context, msgId MsgId, attemptId AttemptId, params *ExpungeWebhookMessageParams, reqEditors ...RequestEditorFn) (*ExpungeWebhookMessageResponse, error)

	// GetWebhookMessageAttemptWithResponse request
	GetWebhookMessageAttemptWithResponse(ctx context.Context, msgId MsgId, attemptId AttemptId, params *GetWebhookMessageAttemptParams, reqEditors ...RequestEditorFn) (*GetWebhookMessageAttemptResponse, error)

	// ListWebhookTypesWithResponse request
	ListWebhookTypesWithResponse(ctx context.Context, params *ListWebhookTypesParams, reqEditors ...RequestEditorFn) (*ListWebhookTypesResponse, error)
}

type ListNotificationTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationTypeList
}

// Status returns HTTPResponse.Status
func (r ListNotificationTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListNotificationTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProviderList
}

// Status returns HTTPResponse.Status
func (r ListProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Provider
}

// Status returns HTTPResponse.Status
func (r GetProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubscriptionList
}

// Status returns HTTPResponse.Status
func (r ListSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubscriptionResult
}

// Status returns HTTPResponse.Status
func (r CreateSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSubscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subscription
}

// Status returns HTTPResponse.Status
func (r GetSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWebhookEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebHookEndpointList
}

// Status returns HTTPResponse.Status
func (r ListWebhookEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWebhookEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWebhookEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WebHookEndpointResult
}

// Status returns HTTPResponse.Status
func (r CreateWebhookEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWebhookEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWebhookEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWebhookEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWebhookEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebhookEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebHookEndpoint
}

// Status returns HTTPResponse.Status
func (r GetWebhookEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebhookEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWebhookEndpointAttemptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebHookAttemptList
}

// Status returns HTTPResponse.Status
func (r ListWebhookEndpointAttemptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWebhookEndpointAttemptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWebhookEndpointMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebHookMessageList
}

// Status returns HTTPResponse.Status
func (r ListWebhookEndpointMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWebhookEndpointMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWebhookEndpointMessageAttemptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebHookAttemptList
}

// Status returns HTTPResponse.Status
func (r ListWebhookEndpointMessageAttemptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWebhookEndpointMessageAttemptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWebhookMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebHookMessageList
}

// Status returns HTTPResponse.Status
func (r ListWebhookMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWebhookMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWebhookMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WebHookMessageResult
}

// Status returns HTTPResponse.Status
func (r CreateWebhookMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWebhookMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebhookMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebHookMessage
}

// Status returns HTTPResponse.Status
func (r GetWebhookMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebhookMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWebhookMessageAttemptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebHookAttemptList
}

// Status returns HTTPResponse.Status
func (r ListWebhookMessageAttemptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWebhookMessageAttemptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExpungeWebhookMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExpungeWebhookMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExpungeWebhookMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebhookMessageAttemptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebHookAttempt
}

// Status returns HTTPResponse.Status
func (r GetWebhookMessageAttemptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebhookMessageAttemptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWebhookTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebHookTypeList
}

// Status returns HTTPResponse.Status
func (r ListWebhookTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWebhookTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListNotificationTypesWithResponse request returning *ListNotificationTypesResponse
func (c *ClientWithResponses) ListNotificationTypesWithResponse(ctx context.Context, params *ListNotificationTypesParams, reqEditors ...RequestEditorFn) (*ListNotificationTypesResponse, error) {
	rsp, err := c.ListNotificationTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListNotificationTypesResponse(rsp)
}

// ListProvidersWithResponse request returning *ListProvidersResponse
func (c *ClientWithResponses) ListProvidersWithResponse(ctx context.Context, params *ListProvidersParams, reqEditors ...RequestEditorFn) (*ListProvidersResponse, error) {
	rsp, err := c.ListProviders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProvidersResponse(rsp)
}

// GetProviderWithResponse request returning *GetProviderResponse
func (c *ClientWithResponses) GetProviderWithResponse(ctx context.Context, providerId ProviderId, params *GetProviderParams, reqEditors ...RequestEditorFn) (*GetProviderResponse, error) {
	rsp, err := c.GetProvider(ctx, providerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProviderResponse(rsp)
}

// ListSubscriptionsWithResponse request returning *ListSubscriptionsResponse
func (c *ClientWithResponses) ListSubscriptionsWithResponse(ctx context.Context, params *ListSubscriptionsParams, reqEditors ...RequestEditorFn) (*ListSubscriptionsResponse, error) {
	rsp, err := c.ListSubscriptions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSubscriptionsResponse(rsp)
}

// CreateSubscriptionsWithBodyWithResponse request with arbitrary body returning *CreateSubscriptionsResponse
func (c *ClientWithResponses) CreateSubscriptionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSubscriptionsResponse, error) {
	rsp, err := c.CreateSubscriptionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) CreateSubscriptionsWithResponse(ctx context.Context, body CreateSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSubscriptionsResponse, error) {
	rsp, err := c.CreateSubscriptions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSubscriptionsResponse(rsp)
}

// DeleteSubscriptionWithResponse request returning *DeleteSubscriptionResponse
func (c *ClientWithResponses) DeleteSubscriptionWithResponse(ctx context.Context, subscriptionId SubscriptionId, reqEditors ...RequestEditorFn) (*DeleteSubscriptionResponse, error) {
	rsp, err := c.DeleteSubscription(ctx, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSubscriptionResponse(rsp)
}

// GetSubscriptionWithResponse request returning *GetSubscriptionResponse
func (c *ClientWithResponses) GetSubscriptionWithResponse(ctx context.Context, subscriptionId SubscriptionId, params *GetSubscriptionParams, reqEditors ...RequestEditorFn) (*GetSubscriptionResponse, error) {
	rsp, err := c.GetSubscription(ctx, subscriptionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSubscriptionResponse(rsp)
}

// ListWebhookEndpointsWithResponse request returning *ListWebhookEndpointsResponse
func (c *ClientWithResponses) ListWebhookEndpointsWithResponse(ctx context.Context, params *ListWebhookEndpointsParams, reqEditors ...RequestEditorFn) (*ListWebhookEndpointsResponse, error) {
	rsp, err := c.ListWebhookEndpoints(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWebhookEndpointsResponse(rsp)
}

// CreateWebhookEndpointsWithBodyWithResponse request with arbitrary body returning *CreateWebhookEndpointsResponse
func (c *ClientWithResponses) CreateWebhookEndpointsWithBodyWithResponse(ctx context.Context, params *CreateWebhookEndpointsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWebhookEndpointsResponse, error) {
	rsp, err := c.CreateWebhookEndpointsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWebhookEndpointsResponse(rsp)
}

func (c *ClientWithResponses) CreateWebhookEndpointsWithResponse(ctx context.Context, params *CreateWebhookEndpointsParams, body CreateWebhookEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWebhookEndpointsResponse, error) {
	rsp, err := c.CreateWebhookEndpoints(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWebhookEndpointsResponse(rsp)
}

// DeleteWebhookEndpointWithResponse request returning *DeleteWebhookEndpointResponse
func (c *ClientWithResponses) DeleteWebhookEndpointWithResponse(ctx context.Context, endpointId EndpointId, params *DeleteWebhookEndpointParams, reqEditors ...RequestEditorFn) (*DeleteWebhookEndpointResponse, error) {
	rsp, err := c.DeleteWebhookEndpoint(ctx, endpointId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWebhookEndpointResponse(rsp)
}

// GetWebhookEndpointWithResponse request returning *GetWebhookEndpointResponse
func (c *ClientWithResponses) GetWebhookEndpointWithResponse(ctx context.Context, endpointId EndpointId, params *GetWebhookEndpointParams, reqEditors ...RequestEditorFn) (*GetWebhookEndpointResponse, error) {
	rsp, err := c.GetWebhookEndpoint(ctx, endpointId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWebhookEndpointResponse(rsp)
}

// ListWebhookEndpointAttemptsWithResponse request returning *ListWebhookEndpointAttemptsResponse
func (c *ClientWithResponses) ListWebhookEndpointAttemptsWithResponse(ctx context.Context, endpointId EndpointId, params *ListWebhookEndpointAttemptsParams, reqEditors ...RequestEditorFn) (*ListWebhookEndpointAttemptsResponse, error) {
	rsp, err := c.ListWebhookEndpointAttempts(ctx, endpointId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWebhookEndpointAttemptsResponse(rsp)
}

// ListWebhookEndpointMessagesWithResponse request returning *ListWebhookEndpointMessagesResponse
func (c *ClientWithResponses) ListWebhookEndpointMessagesWithResponse(ctx context.Context, endpointId EndpointId, params *ListWebhookEndpointMessagesParams, reqEditors ...RequestEditorFn) (*ListWebhookEndpointMessagesResponse, error) {
	rsp, err := c.ListWebhookEndpointMessages(ctx, endpointId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWebhookEndpointMessagesResponse(rsp)
}

// ListWebhookEndpointMessageAttemptsWithResponse request returning *ListWebhookEndpointMessageAttemptsResponse
func (c *ClientWithResponses) ListWebhookEndpointMessageAttemptsWithResponse(ctx context.Context, endpointId EndpointId, msgId MsgId, params *ListWebhookEndpointMessageAttemptsParams, reqEditors ...RequestEditorFn) (*ListWebhookEndpointMessageAttemptsResponse, error) {
	rsp, err := c.ListWebhookEndpointMessageAttempts(ctx, endpointId, msgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWebhookEndpointMessageAttemptsResponse(rsp)
}

// ListWebhookMessagesWithResponse request returning *ListWebhookMessagesResponse
func (c *ClientWithResponses) ListWebhookMessagesWithResponse(ctx context.Context, params *ListWebhookMessagesParams, reqEditors ...RequestEditorFn) (*ListWebhookMessagesResponse, error) {
	rsp, err := c.ListWebhookMessages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWebhookMessagesResponse(rsp)
}

// CreateWebhookMessagesWithBodyWithResponse request with arbitrary body returning *CreateWebhookMessagesResponse
func (c *ClientWithResponses) CreateWebhookMessagesWithBodyWithResponse(ctx context.Context, params *CreateWebhookMessagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWebhookMessagesResponse, error) {
	rsp, err := c.CreateWebhookMessagesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWebhookMessagesResponse(rsp)
}

func (c *ClientWithResponses) CreateWebhookMessagesWithResponse(ctx context.Context, params *CreateWebhookMessagesParams, body CreateWebhookMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWebhookMessagesResponse, error) {
	rsp, err := c.CreateWebhookMessages(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWebhookMessagesResponse(rsp)
}

// GetWebhookMessageWithResponse request returning *GetWebhookMessageResponse
func (c *ClientWithResponses) GetWebhookMessageWithResponse(ctx context.Context, msgId MsgId, params *GetWebhookMessageParams, reqEditors ...RequestEditorFn) (*GetWebhookMessageResponse, error) {
	rsp, err := c.GetWebhookMessage(ctx, msgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWebhookMessageResponse(rsp)
}

// ListWebhookMessageAttemptsWithResponse request returning *ListWebhookMessageAttemptsResponse
func (c *ClientWithResponses) ListWebhookMessageAttemptsWithResponse(ctx context.Context, msgId MsgId, params *ListWebhookMessageAttemptsParams, reqEditors ...RequestEditorFn) (*ListWebhookMessageAttemptsResponse, error) {
	rsp, err := c.ListWebhookMessageAttempts(ctx, msgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWebhookMessageAttemptsResponse(rsp)
}

// ExpungeWebhookMessageWithResponse request returning *ExpungeWebhookMessageResponse
func (c *ClientWithResponses) ExpungeWebhookMessageWithResponse(ctx context.Context, msgId MsgId, attemptId AttemptId, params *ExpungeWebhookMessageParams, reqEditors ...RequestEditorFn) (*ExpungeWebhookMessageResponse, error) {
	rsp, err := c.ExpungeWebhookMessage(ctx, msgId, attemptId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExpungeWebhookMessageResponse(rsp)
}

// GetWebhookMessageAttemptWithResponse request returning *GetWebhookMessageAttemptResponse
func (c *ClientWithResponses) GetWebhookMessageAttemptWithResponse(ctx context.Context, msgId MsgId, attemptId AttemptId, params *GetWebhookMessageAttemptParams, reqEditors ...RequestEditorFn) (*GetWebhookMessageAttemptResponse, error) {
	rsp, err := c.GetWebhookMessageAttempt(ctx, msgId, attemptId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWebhookMessageAttemptResponse(rsp)
}

// ListWebhookTypesWithResponse request returning *ListWebhookTypesResponse
func (c *ClientWithResponses) ListWebhookTypesWithResponse(ctx context.Context, params *ListWebhookTypesParams, reqEditors ...RequestEditorFn) (*ListWebhookTypesResponse, error) {
	rsp, err := c.ListWebhookTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWebhookTypesResponse(rsp)
}

// ParseListNotificationTypesResponse parses an HTTP response from a ListNotificationTypesWithResponse call
func ParseListNotificationTypesResponse(rsp *http.Response) (*ListNotificationTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListNotificationTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationTypeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListProvidersResponse parses an HTTP response from a ListProvidersWithResponse call
func ParseListProvidersResponse(rsp *http.Response) (*ListProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProviderList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProviderResponse parses an HTTP response from a GetProviderWithResponse call
func ParseGetProviderResponse(rsp *http.Response) (*GetProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Provider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListSubscriptionsResponse parses an HTTP response from a ListSubscriptionsWithResponse call
func ParseListSubscriptionsResponse(rsp *http.Response) (*ListSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubscriptionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSubscriptionsResponse parses an HTTP response from a CreateSubscriptionsWithResponse call
func ParseCreateSubscriptionsResponse(rsp *http.Response) (*CreateSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubscriptionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteSubscriptionResponse parses an HTTP response from a DeleteSubscriptionWithResponse call
func ParseDeleteSubscriptionResponse(rsp *http.Response) (*DeleteSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSubscriptionResponse parses an HTTP response from a GetSubscriptionWithResponse call
func ParseGetSubscriptionResponse(rsp *http.Response) (*GetSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListWebhookEndpointsResponse parses an HTTP response from a ListWebhookEndpointsWithResponse call
func ParseListWebhookEndpointsResponse(rsp *http.Response) (*ListWebhookEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWebhookEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebHookEndpointList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateWebhookEndpointsResponse parses an HTTP response from a CreateWebhookEndpointsWithResponse call
func ParseCreateWebhookEndpointsResponse(rsp *http.Response) (*CreateWebhookEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWebhookEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WebHookEndpointResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteWebhookEndpointResponse parses an HTTP response from a DeleteWebhookEndpointWithResponse call
func ParseDeleteWebhookEndpointResponse(rsp *http.Response) (*DeleteWebhookEndpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWebhookEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWebhookEndpointResponse parses an HTTP response from a GetWebhookEndpointWithResponse call
func ParseGetWebhookEndpointResponse(rsp *http.Response) (*GetWebhookEndpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWebhookEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebHookEndpoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListWebhookEndpointAttemptsResponse parses an HTTP response from a ListWebhookEndpointAttemptsWithResponse call
func ParseListWebhookEndpointAttemptsResponse(rsp *http.Response) (*ListWebhookEndpointAttemptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWebhookEndpointAttemptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebHookAttemptList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListWebhookEndpointMessagesResponse parses an HTTP response from a ListWebhookEndpointMessagesWithResponse call
func ParseListWebhookEndpointMessagesResponse(rsp *http.Response) (*ListWebhookEndpointMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWebhookEndpointMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebHookMessageList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListWebhookEndpointMessageAttemptsResponse parses an HTTP response from a ListWebhookEndpointMessageAttemptsWithResponse call
func ParseListWebhookEndpointMessageAttemptsResponse(rsp *http.Response) (*ListWebhookEndpointMessageAttemptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWebhookEndpointMessageAttemptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebHookAttemptList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListWebhookMessagesResponse parses an HTTP response from a ListWebhookMessagesWithResponse call
func ParseListWebhookMessagesResponse(rsp *http.Response) (*ListWebhookMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWebhookMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebHookMessageList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateWebhookMessagesResponse parses an HTTP response from a CreateWebhookMessagesWithResponse call
func ParseCreateWebhookMessagesResponse(rsp *http.Response) (*CreateWebhookMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWebhookMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WebHookMessageResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetWebhookMessageResponse parses an HTTP response from a GetWebhookMessageWithResponse call
func ParseGetWebhookMessageResponse(rsp *http.Response) (*GetWebhookMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWebhookMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebHookMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListWebhookMessageAttemptsResponse parses an HTTP response from a ListWebhookMessageAttemptsWithResponse call
func ParseListWebhookMessageAttemptsResponse(rsp *http.Response) (*ListWebhookMessageAttemptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWebhookMessageAttemptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebHookAttemptList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExpungeWebhookMessageResponse parses an HTTP response from a ExpungeWebhookMessageWithResponse call
func ParseExpungeWebhookMessageResponse(rsp *http.Response) (*ExpungeWebhookMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExpungeWebhookMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWebhookMessageAttemptResponse parses an HTTP response from a GetWebhookMessageAttemptWithResponse call
func ParseGetWebhookMessageAttemptResponse(rsp *http.Response) (*GetWebhookMessageAttemptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWebhookMessageAttemptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebHookAttempt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListWebhookTypesResponse parses an HTTP response from a ListWebhookTypesWithResponse call
func ParseListWebhookTypesResponse(rsp *http.Response) (*ListWebhookTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWebhookTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebHookTypeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Notification Types
	// (GET /notification-types)
	ListNotificationTypes(w http.ResponseWriter, r *http.Request, params ListNotificationTypesParams)
	// List Notification Providers
	// (GET /providers)
	ListProviders(w http.ResponseWriter, r *http.Request, params ListProvidersParams)
	// Get Notification Provider
	// (GET /providers/{providerId})
	GetProvider(w http.ResponseWriter, r *http.Request, providerId ProviderId, params GetProviderParams)
	// List Subscriptions
	// (GET /subscriptions)
	ListSubscriptions(w http.ResponseWriter, r *http.Request, params ListSubscriptionsParams)
	// Subscribe
	// (POST /subscriptions)
	CreateSubscriptions(w http.ResponseWriter, r *http.Request)
	// Unsubscribe
	// (DELETE /subscriptions/{subscriptionId})
	DeleteSubscription(w http.ResponseWriter, r *http.Request, subscriptionId SubscriptionId)
	// Get Subscription
	// (GET /subscriptions/{subscriptionId})
	GetSubscription(w http.ResponseWriter, r *http.Request, subscriptionId SubscriptionId, params GetSubscriptionParams)
	// List Web Hook Endpoints
	// (GET /webhoook/endpoints)
	ListWebhookEndpoints(w http.ResponseWriter, r *http.Request, params ListWebhookEndpointsParams)
	// Create Web Hook Endpoints
	// (POST /webhoook/endpoints)
	CreateWebhookEndpoints(w http.ResponseWriter, r *http.Request, params CreateWebhookEndpointsParams)
	// Delete Web Hook Endpoint
	// (DELETE /webhoook/endpoints/{endpointId})
	DeleteWebhookEndpoint(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params DeleteWebhookEndpointParams)
	// Get Web Hook Endpoint
	// (GET /webhoook/endpoints/{endpointId})
	GetWebhookEndpoint(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params GetWebhookEndpointParams)
	// List Web Hook Endpoint Attempts
	// (GET /webhoook/endpoints/{endpointId}/attempts)
	ListWebhookEndpointAttempts(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params ListWebhookEndpointAttemptsParams)
	// List Web Hook Endpoint Messages
	// (GET /webhoook/endpoints/{endpointId}/messages)
	ListWebhookEndpointMessages(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params ListWebhookEndpointMessagesParams)
	// List Web Hook Endpoint Message Attempts
	// (GET /webhoook/endpoints/{endpointId}/messages/{msgId})
	ListWebhookEndpointMessageAttempts(w http.ResponseWriter, r *http.Request, endpointId EndpointId, msgId MsgId, params ListWebhookEndpointMessageAttemptsParams)
	// List Web Hook Messages
	// (GET /webhoook/messages)
	ListWebhookMessages(w http.ResponseWriter, r *http.Request, params ListWebhookMessagesParams)
	// Create Web Hook Messages
	// (POST /webhoook/messages)
	CreateWebhookMessages(w http.ResponseWriter, r *http.Request, params CreateWebhookMessagesParams)
	// Get Web Hook Message
	// (GET /webhoook/messages/{msgId})
	GetWebhookMessage(w http.ResponseWriter, r *http.Request, msgId MsgId, params GetWebhookMessageParams)
	// List Web Hook Message Attempts
	// (GET /webhoook/messages/{msgId}/attempts)
	ListWebhookMessageAttempts(w http.ResponseWriter, r *http.Request, msgId MsgId, params ListWebhookMessageAttemptsParams)
	// Expunge Web Hook Message
	// (DELETE /webhoook/messages/{msgId}/attempts/{attemptId})
	ExpungeWebhookMessage(w http.ResponseWriter, r *http.Request, msgId MsgId, attemptId AttemptId, params ExpungeWebhookMessageParams)
	// Get Web Hook Message Attempt
	// (GET /webhoook/messages/{msgId}/attempts/{attemptId})
	GetWebhookMessageAttempt(w http.ResponseWriter, r *http.Request, msgId MsgId, attemptId AttemptId, params GetWebhookMessageAttemptParams)
	// List Web Hook Types
	// (GET /webhoook/types)
	ListWebhookTypes(w http.ResponseWriter, r *http.Request, params ListWebhookTypesParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List Notification Types
// (GET /notification-types)
func (_ Unimplemented) ListNotificationTypes(w http.ResponseWriter, r *http.Request, params ListNotificationTypesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Notification Providers
// (GET /providers)
func (_ Unimplemented) ListProviders(w http.ResponseWriter, r *http.Request, params ListProvidersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Notification Provider
// (GET /providers/{providerId})
func (_ Unimplemented) GetProvider(w http.ResponseWriter, r *http.Request, providerId ProviderId, params GetProviderParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Subscriptions
// (GET /subscriptions)
func (_ Unimplemented) ListSubscriptions(w http.ResponseWriter, r *http.Request, params ListSubscriptionsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Subscribe
// (POST /subscriptions)
func (_ Unimplemented) CreateSubscriptions(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unsubscribe
// (DELETE /subscriptions/{subscriptionId})
func (_ Unimplemented) DeleteSubscription(w http.ResponseWriter, r *http.Request, subscriptionId SubscriptionId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Subscription
// (GET /subscriptions/{subscriptionId})
func (_ Unimplemented) GetSubscription(w http.ResponseWriter, r *http.Request, subscriptionId SubscriptionId, params GetSubscriptionParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Web Hook Endpoints
// (GET /webhoook/endpoints)
func (_ Unimplemented) ListWebhookEndpoints(w http.ResponseWriter, r *http.Request, params ListWebhookEndpointsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create Web Hook Endpoints
// (POST /webhoook/endpoints)
func (_ Unimplemented) CreateWebhookEndpoints(w http.ResponseWriter, r *http.Request, params CreateWebhookEndpointsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete Web Hook Endpoint
// (DELETE /webhoook/endpoints/{endpointId})
func (_ Unimplemented) DeleteWebhookEndpoint(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params DeleteWebhookEndpointParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Web Hook Endpoint
// (GET /webhoook/endpoints/{endpointId})
func (_ Unimplemented) GetWebhookEndpoint(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params GetWebhookEndpointParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Web Hook Endpoint Attempts
// (GET /webhoook/endpoints/{endpointId}/attempts)
func (_ Unimplemented) ListWebhookEndpointAttempts(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params ListWebhookEndpointAttemptsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Web Hook Endpoint Messages
// (GET /webhoook/endpoints/{endpointId}/messages)
func (_ Unimplemented) ListWebhookEndpointMessages(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params ListWebhookEndpointMessagesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Web Hook Endpoint Message Attempts
// (GET /webhoook/endpoints/{endpointId}/messages/{msgId})
func (_ Unimplemented) ListWebhookEndpointMessageAttempts(w http.ResponseWriter, r *http.Request, endpointId EndpointId, msgId MsgId, params ListWebhookEndpointMessageAttemptsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Web Hook Messages
// (GET /webhoook/messages)
func (_ Unimplemented) ListWebhookMessages(w http.ResponseWriter, r *http.Request, params ListWebhookMessagesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create Web Hook Messages
// (POST /webhoook/messages)
func (_ Unimplemented) CreateWebhookMessages(w http.ResponseWriter, r *http.Request, params CreateWebhookMessagesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Web Hook Message
// (GET /webhoook/messages/{msgId})
func (_ Unimplemented) GetWebhookMessage(w http.ResponseWriter, r *http.Request, msgId MsgId, params GetWebhookMessageParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Web Hook Message Attempts
// (GET /webhoook/messages/{msgId}/attempts)
func (_ Unimplemented) ListWebhookMessageAttempts(w http.ResponseWriter, r *http.Request, msgId MsgId, params ListWebhookMessageAttemptsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Expunge Web Hook Message
// (DELETE /webhoook/messages/{msgId}/attempts/{attemptId})
func (_ Unimplemented) ExpungeWebhookMessage(w http.ResponseWriter, r *http.Request, msgId MsgId, attemptId AttemptId, params ExpungeWebhookMessageParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Web Hook Message Attempt
// (GET /webhoook/messages/{msgId}/attempts/{attemptId})
func (_ Unimplemented) GetWebhookMessageAttempt(w http.ResponseWriter, r *http.Request, msgId MsgId, attemptId AttemptId, params GetWebhookMessageAttemptParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Web Hook Types
// (GET /webhoook/types)
func (_ Unimplemented) ListWebhookTypes(w http.ResponseWriter, r *http.Request, params ListWebhookTypesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListNotificationTypes operation middleware
func (siw *ServerInterfaceWrapper) ListNotificationTypes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListNotificationTypesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListNotificationTypes(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListProviders operation middleware
func (siw *ServerInterfaceWrapper) ListProviders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProvidersParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProviders(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProvider operation middleware
func (siw *ServerInterfaceWrapper) GetProvider(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId ProviderId

	err = runtime.BindStyledParameterWithLocation("simple", false, "providerId", runtime.ParamLocationPath, chi.URLParam(r, "providerId"), &providerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProviderParams

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProvider(w, r, providerId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) ListSubscriptions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSubscriptionsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubscriptions(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) CreateSubscriptions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSubscriptions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubscription(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId SubscriptionId

	err = runtime.BindStyledParameterWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, chi.URLParam(r, "subscriptionId"), &subscriptionId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubscription(w, r, subscriptionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSubscription operation middleware
func (siw *ServerInterfaceWrapper) GetSubscription(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId SubscriptionId

	err = runtime.BindStyledParameterWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, chi.URLParam(r, "subscriptionId"), &subscriptionId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionParams

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscription(w, r, subscriptionId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListWebhookEndpoints operation middleware
func (siw *ServerInterfaceWrapper) ListWebhookEndpoints(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWebhookEndpointsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListWebhookEndpoints(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateWebhookEndpoints operation middleware
func (siw *ServerInterfaceWrapper) CreateWebhookEndpoints(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateWebhookEndpointsParams

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateWebhookEndpoints(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteWebhookEndpoint operation middleware
func (siw *ServerInterfaceWrapper) DeleteWebhookEndpoint(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "endpointId" -------------
	var endpointId EndpointId

	err = runtime.BindStyledParameterWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, chi.URLParam(r, "endpointId"), &endpointId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endpointId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteWebhookEndpointParams

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteWebhookEndpoint(w, r, endpointId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetWebhookEndpoint operation middleware
func (siw *ServerInterfaceWrapper) GetWebhookEndpoint(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "endpointId" -------------
	var endpointId EndpointId

	err = runtime.BindStyledParameterWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, chi.URLParam(r, "endpointId"), &endpointId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endpointId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWebhookEndpointParams

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWebhookEndpoint(w, r, endpointId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListWebhookEndpointAttempts operation middleware
func (siw *ServerInterfaceWrapper) ListWebhookEndpointAttempts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "endpointId" -------------
	var endpointId EndpointId

	err = runtime.BindStyledParameterWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, chi.URLParam(r, "endpointId"), &endpointId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endpointId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWebhookEndpointAttemptsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListWebhookEndpointAttempts(w, r, endpointId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListWebhookEndpointMessages operation middleware
func (siw *ServerInterfaceWrapper) ListWebhookEndpointMessages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "endpointId" -------------
	var endpointId EndpointId

	err = runtime.BindStyledParameterWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, chi.URLParam(r, "endpointId"), &endpointId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endpointId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWebhookEndpointMessagesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListWebhookEndpointMessages(w, r, endpointId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListWebhookEndpointMessageAttempts operation middleware
func (siw *ServerInterfaceWrapper) ListWebhookEndpointMessageAttempts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "endpointId" -------------
	var endpointId EndpointId

	err = runtime.BindStyledParameterWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, chi.URLParam(r, "endpointId"), &endpointId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endpointId", Err: err})
		return
	}

	// ------------- Path parameter "msgId" -------------
	var msgId MsgId

	err = runtime.BindStyledParameterWithLocation("simple", false, "msgId", runtime.ParamLocationPath, chi.URLParam(r, "msgId"), &msgId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "msgId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWebhookEndpointMessageAttemptsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListWebhookEndpointMessageAttempts(w, r, endpointId, msgId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListWebhookMessages operation middleware
func (siw *ServerInterfaceWrapper) ListWebhookMessages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWebhookMessagesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListWebhookMessages(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateWebhookMessages operation middleware
func (siw *ServerInterfaceWrapper) CreateWebhookMessages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateWebhookMessagesParams

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateWebhookMessages(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetWebhookMessage operation middleware
func (siw *ServerInterfaceWrapper) GetWebhookMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "msgId" -------------
	var msgId MsgId

	err = runtime.BindStyledParameterWithLocation("simple", false, "msgId", runtime.ParamLocationPath, chi.URLParam(r, "msgId"), &msgId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "msgId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWebhookMessageParams

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWebhookMessage(w, r, msgId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListWebhookMessageAttempts operation middleware
func (siw *ServerInterfaceWrapper) ListWebhookMessageAttempts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "msgId" -------------
	var msgId MsgId

	err = runtime.BindStyledParameterWithLocation("simple", false, "msgId", runtime.ParamLocationPath, chi.URLParam(r, "msgId"), &msgId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "msgId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWebhookMessageAttemptsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListWebhookMessageAttempts(w, r, msgId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ExpungeWebhookMessage operation middleware
func (siw *ServerInterfaceWrapper) ExpungeWebhookMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "msgId" -------------
	var msgId MsgId

	err = runtime.BindStyledParameterWithLocation("simple", false, "msgId", runtime.ParamLocationPath, chi.URLParam(r, "msgId"), &msgId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "msgId", Err: err})
		return
	}

	// ------------- Path parameter "attemptId" -------------
	var attemptId AttemptId

	err = runtime.BindStyledParameterWithLocation("simple", false, "attemptId", runtime.ParamLocationPath, chi.URLParam(r, "attemptId"), &attemptId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "attemptId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ExpungeWebhookMessageParams

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExpungeWebhookMessage(w, r, msgId, attemptId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetWebhookMessageAttempt operation middleware
func (siw *ServerInterfaceWrapper) GetWebhookMessageAttempt(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "msgId" -------------
	var msgId MsgId

	err = runtime.BindStyledParameterWithLocation("simple", false, "msgId", runtime.ParamLocationPath, chi.URLParam(r, "msgId"), &msgId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "msgId", Err: err})
		return
	}

	// ------------- Path parameter "attemptId" -------------
	var attemptId AttemptId

	err = runtime.BindStyledParameterWithLocation("simple", false, "attemptId", runtime.ParamLocationPath, chi.URLParam(r, "attemptId"), &attemptId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "attemptId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWebhookMessageAttemptParams

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWebhookMessageAttempt(w, r, msgId, attemptId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListWebhookTypes operation middleware
func (siw *ServerInterfaceWrapper) ListWebhookTypes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWebhookTypesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListWebhookTypes(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/notification-types", wrapper.ListNotificationTypes)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/providers", wrapper.ListProviders)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/providers/{providerId}", wrapper.GetProvider)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/subscriptions", wrapper.ListSubscriptions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/subscriptions", wrapper.CreateSubscriptions)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/subscriptions/{subscriptionId}", wrapper.DeleteSubscription)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/subscriptions/{subscriptionId}", wrapper.GetSubscription)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/webhoook/endpoints", wrapper.ListWebhookEndpoints)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/webhoook/endpoints", wrapper.CreateWebhookEndpoints)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/webhoook/endpoints/{endpointId}", wrapper.DeleteWebhookEndpoint)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/webhoook/endpoints/{endpointId}", wrapper.GetWebhookEndpoint)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/webhoook/endpoints/{endpointId}/attempts", wrapper.ListWebhookEndpointAttempts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/webhoook/endpoints/{endpointId}/messages", wrapper.ListWebhookEndpointMessages)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/webhoook/endpoints/{endpointId}/messages/{msgId}", wrapper.ListWebhookEndpointMessageAttempts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/webhoook/messages", wrapper.ListWebhookMessages)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/webhoook/messages", wrapper.CreateWebhookMessages)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/webhoook/messages/{msgId}", wrapper.GetWebhookMessage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/webhoook/messages/{msgId}/attempts", wrapper.ListWebhookMessageAttempts)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/webhoook/messages/{msgId}/attempts/{attemptId}", wrapper.ExpungeWebhookMessage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/webhoook/messages/{msgId}/attempts/{attemptId}", wrapper.GetWebhookMessageAttempt)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/webhoook/types", wrapper.ListWebhookTypes)
	})

	return r
}
