// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: app/webhook/grpc/v1/webhooks.proto

package webhooksv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebHookService_CreateApps_FullMethodName = "/webhooks.v1.WebHookService/CreateApps"
)

// WebHookServiceClient is the client API for WebHookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebHookServiceClient interface {
	CreateApps(ctx context.Context, in *CreateAppsRequest, opts ...grpc.CallOption) (*CreateAppsResponse, error)
}

type webHookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebHookServiceClient(cc grpc.ClientConnInterface) WebHookServiceClient {
	return &webHookServiceClient{cc}
}

func (c *webHookServiceClient) CreateApps(ctx context.Context, in *CreateAppsRequest, opts ...grpc.CallOption) (*CreateAppsResponse, error) {
	out := new(CreateAppsResponse)
	err := c.cc.Invoke(ctx, WebHookService_CreateApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebHookServiceServer is the server API for WebHookService service.
// All implementations should embed UnimplementedWebHookServiceServer
// for forward compatibility
type WebHookServiceServer interface {
	CreateApps(context.Context, *CreateAppsRequest) (*CreateAppsResponse, error)
}

// UnimplementedWebHookServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWebHookServiceServer struct {
}

func (UnimplementedWebHookServiceServer) CreateApps(context.Context, *CreateAppsRequest) (*CreateAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApps not implemented")
}

// UnsafeWebHookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebHookServiceServer will
// result in compilation errors.
type UnsafeWebHookServiceServer interface {
	mustEmbedUnimplementedWebHookServiceServer()
}

func RegisterWebHookServiceServer(s grpc.ServiceRegistrar, srv WebHookServiceServer) {
	s.RegisterService(&WebHookService_ServiceDesc, srv)
}

func _WebHookService_CreateApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebHookServiceServer).CreateApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebHookService_CreateApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebHookServiceServer).CreateApps(ctx, req.(*CreateAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebHookService_ServiceDesc is the grpc.ServiceDesc for WebHookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebHookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webhooks.v1.WebHookService",
	HandlerType: (*WebHookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApps",
			Handler:    _WebHookService_CreateApps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/webhook/grpc/v1/webhooks.proto",
}
