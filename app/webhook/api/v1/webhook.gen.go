// Package eventsv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package eventsv1

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Attempt Message Attempt to an Endpoint
type Attempt struct {
	EndpointId         string    `json:"endpointId"`
	Id                 string    `json:"id"`
	MsgId              string    `json:"msgId"`
	Response           string    `json:"response"`
	ResponseStatusCode int32     `json:"responseStatusCode"`
	Status             string    `json:"status"`
	Timestamp          time.Time `json:"timestamp"`
	TriggerType        string    `json:"triggerType"`
	Url                string    `json:"url"`
}

// Endpoint web-hook endpoint
type Endpoint struct {
	Channels    []string  `json:"channels"`
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Disabled    *bool     `json:"disabled,omitempty"`
	FilterTypes []string  `json:"filterTypes"`

	// Id Unique identifier for the given endpoint.
	Id        string  `json:"id"`
	Metadata  string  `json:"metadata"`
	RateLimit *int32  `json:"rateLimit,omitempty"`
	Uid       *string `json:"uid,omitempty"`
	Url       string  `json:"url"`
}

// Error defines model for Error.
type Error struct {
	Code   *int    `json:"code,omitempty"`
	Index  *string `json:"index,omitempty"`
	Reason *string `json:"reason,omitempty"`
}

// EventType defines model for EventType.
type EventType struct {
	CreatedAt   time.Time          `json:"createdAt"`
	Description string             `json:"description"`
	Name        string             `json:"name"`
	Schemas     openapi_types.File `json:"schemas"`
	UpdatedAt   time.Time          `json:"updatedAt"`
}

// Message defines model for Message.
type Message struct {
	Channels  []string  `json:"channels"`
	CreatedAt time.Time `json:"createdAt"`
	EventId   *string   `json:"eventId,omitempty"`
	EventType string    `json:"eventType"`
	Id        *string   `json:"id,omitempty"`
	Payload   string    `json:"payload"`
}

// NewEndpoint defines model for NewEndpoint.
type NewEndpoint struct {
	Channels    *[]string `json:"channels,omitempty"`
	Description *string   `json:"description,omitempty"`
	Disabled    *bool     `json:"disabled,omitempty"`
	FilterTypes *[]string `json:"filterTypes,omitempty"`
	Metadata    *string   `json:"metadata,omitempty"`
	RateLimit   *int32    `json:"rateLimit,omitempty"`
	Secret      *string   `json:"secret,omitempty"`
	Uid         *string   `json:"uid,omitempty"`
	Url         string    `json:"url"`
}

// NewMessage defines model for NewMessage.
type NewMessage struct {
	Channels        *[]string `json:"channels,omitempty"`
	EventId         *string   `json:"eventId,omitempty"`
	EventType       string    `json:"eventType"`
	Payload         string    `json:"payload"`
	RetentionPeriod *int64    `json:"retentionPeriod,omitempty"`
	Tags            *[]string `json:"tags,omitempty"`
}

// PageInfo defines model for PageInfo.
type PageInfo struct {
	Done bool    `json:"done"`
	Next *string `json:"next,omitempty"`
	Prev *string `json:"prev,omitempty"`
}

// AttemptId defines model for attemptId.
type AttemptId = string

// Cursor defines model for cursor.
type Cursor = string

// EndpointId defines model for endpointId.
type EndpointId = string

// Limit defines model for limit.
type Limit = int32

// MsgId defines model for msgId.
type MsgId = string

// TenantId defines model for tenantId.
type TenantId = string

// AttemptList defines model for AttemptList.
type AttemptList struct {
	Cursor PageInfo  `json:"cursor"`
	Data   []Attempt `json:"data"`
}

// EndpointList defines model for EndpointList.
type EndpointList struct {
	Cursor PageInfo   `json:"cursor"`
	Data   []Endpoint `json:"data"`
}

// EndpointResult defines model for EndpointResult.
type EndpointResult struct {
	Data   []Endpoint `json:"data"`
	Errors *[]Error   `json:"errors,omitempty"`
}

// EventTypeList defines model for EventTypeList.
type EventTypeList struct {
	Cursor PageInfo    `json:"cursor"`
	Data   []EventType `json:"data"`
}

// MessageList defines model for MessageList.
type MessageList struct {
	Cursor PageInfo  `json:"cursor"`
	Data   []Message `json:"data"`
}

// MessageResult defines model for MessageResult.
type MessageResult struct {
	Data   []Message `json:"data"`
	Errors *[]Error  `json:"errors,omitempty"`
}

// NewEndpoints defines model for NewEndpoints.
type NewEndpoints = []NewEndpoint

// NewMessages defines model for NewMessages.
type NewMessages = []NewMessage

// ListEndpointsParams defines parameters for ListEndpoints.
type ListEndpointsParams struct {
	Limit    *Limit   `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor   *Cursor  `form:"cursor,omitempty" json:"cursor,omitempty"`
	TenantId TenantId `json:"tenantId"`
}

// CreateEndpointsJSONBody defines parameters for CreateEndpoints.
type CreateEndpointsJSONBody = []NewEndpoint

// CreateEndpointsParams defines parameters for CreateEndpoints.
type CreateEndpointsParams struct {
	TenantId TenantId `json:"tenantId"`
}

// DeleteEndpointParams defines parameters for DeleteEndpoint.
type DeleteEndpointParams struct {
	TenantId TenantId `json:"tenantId"`
}

// GetEndpointParams defines parameters for GetEndpoint.
type GetEndpointParams struct {
	TenantId TenantId `json:"tenantId"`
}

// ListEndpointAttemptsParams defines parameters for ListEndpointAttempts.
type ListEndpointAttemptsParams struct {
	Limit    *Limit   `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor   *Cursor  `form:"cursor,omitempty" json:"cursor,omitempty"`
	TenantId TenantId `json:"tenantId"`
}

// ListEndpointMessagesParams defines parameters for ListEndpointMessages.
type ListEndpointMessagesParams struct {
	Limit    *Limit   `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor   *Cursor  `form:"cursor,omitempty" json:"cursor,omitempty"`
	TenantId TenantId `json:"tenantId"`
}

// ListEndpointMessageAttemptsParams defines parameters for ListEndpointMessageAttempts.
type ListEndpointMessageAttemptsParams struct {
	Limit    *Limit   `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor   *Cursor  `form:"cursor,omitempty" json:"cursor,omitempty"`
	TenantId TenantId `json:"tenantId"`
}

// ListMessagesParams defines parameters for ListMessages.
type ListMessagesParams struct {
	Limit    *Limit   `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor   *Cursor  `form:"cursor,omitempty" json:"cursor,omitempty"`
	TenantId TenantId `json:"tenantId"`
}

// CreateMessagesJSONBody defines parameters for CreateMessages.
type CreateMessagesJSONBody = []NewMessage

// CreateMessagesParams defines parameters for CreateMessages.
type CreateMessagesParams struct {
	TenantId TenantId `json:"tenantId"`
}

// GetMessageParams defines parameters for GetMessage.
type GetMessageParams struct {
	TenantId TenantId `json:"tenantId"`
}

// ListMessageAttemptsParams defines parameters for ListMessageAttempts.
type ListMessageAttemptsParams struct {
	Limit    *Limit   `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor   *Cursor  `form:"cursor,omitempty" json:"cursor,omitempty"`
	TenantId TenantId `json:"tenantId"`
}

// ExpungeMessageParams defines parameters for ExpungeMessage.
type ExpungeMessageParams struct {
	TenantId TenantId `json:"tenantId"`
}

// GetMessageAttemptParams defines parameters for GetMessageAttempt.
type GetMessageAttemptParams struct {
	TenantId TenantId `json:"tenantId"`
}

// ListTypesParams defines parameters for ListTypes.
type ListTypesParams struct {
	Limit  *Limit  `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// CreateEndpointsJSONRequestBody defines body for CreateEndpoints for application/json ContentType.
type CreateEndpointsJSONRequestBody = CreateEndpointsJSONBody

// CreateMessagesJSONRequestBody defines body for CreateMessages for application/json ContentType.
type CreateMessagesJSONRequestBody = CreateMessagesJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListEndpoints request
	ListEndpoints(ctx context.Context, params *ListEndpointsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEndpointsWithBody request with any body
	CreateEndpointsWithBody(ctx context.Context, params *CreateEndpointsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEndpoints(ctx context.Context, params *CreateEndpointsParams, body CreateEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEndpoint request
	DeleteEndpoint(ctx context.Context, endpointId EndpointId, params *DeleteEndpointParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEndpoint request
	GetEndpoint(ctx context.Context, endpointId EndpointId, params *GetEndpointParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEndpointAttempts request
	ListEndpointAttempts(ctx context.Context, endpointId EndpointId, params *ListEndpointAttemptsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEndpointMessages request
	ListEndpointMessages(ctx context.Context, endpointId EndpointId, params *ListEndpointMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEndpointMessageAttempts request
	ListEndpointMessageAttempts(ctx context.Context, endpointId EndpointId, msgId MsgId, params *ListEndpointMessageAttemptsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMessages request
	ListMessages(ctx context.Context, params *ListMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMessagesWithBody request with any body
	CreateMessagesWithBody(ctx context.Context, params *CreateMessagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMessages(ctx context.Context, params *CreateMessagesParams, body CreateMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMessage request
	GetMessage(ctx context.Context, msgId MsgId, params *GetMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMessageAttempts request
	ListMessageAttempts(ctx context.Context, msgId MsgId, params *ListMessageAttemptsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExpungeMessage request
	ExpungeMessage(ctx context.Context, msgId MsgId, attemptId AttemptId, params *ExpungeMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMessageAttempt request
	GetMessageAttempt(ctx context.Context, msgId MsgId, attemptId AttemptId, params *GetMessageAttemptParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTypes request
	ListTypes(ctx context.Context, params *ListTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListEndpoints(ctx context.Context, params *ListEndpointsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEndpointsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEndpointsWithBody(ctx context.Context, params *CreateEndpointsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEndpointsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEndpoints(ctx context.Context, params *CreateEndpointsParams, body CreateEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEndpointsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEndpoint(ctx context.Context, endpointId EndpointId, params *DeleteEndpointParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEndpointRequest(c.Server, endpointId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEndpoint(ctx context.Context, endpointId EndpointId, params *GetEndpointParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEndpointRequest(c.Server, endpointId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEndpointAttempts(ctx context.Context, endpointId EndpointId, params *ListEndpointAttemptsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEndpointAttemptsRequest(c.Server, endpointId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEndpointMessages(ctx context.Context, endpointId EndpointId, params *ListEndpointMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEndpointMessagesRequest(c.Server, endpointId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEndpointMessageAttempts(ctx context.Context, endpointId EndpointId, msgId MsgId, params *ListEndpointMessageAttemptsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEndpointMessageAttemptsRequest(c.Server, endpointId, msgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMessages(ctx context.Context, params *ListMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMessagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMessagesWithBody(ctx context.Context, params *CreateMessagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMessagesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMessages(ctx context.Context, params *CreateMessagesParams, body CreateMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMessagesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessage(ctx context.Context, msgId MsgId, params *GetMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMessageRequest(c.Server, msgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMessageAttempts(ctx context.Context, msgId MsgId, params *ListMessageAttemptsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMessageAttemptsRequest(c.Server, msgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExpungeMessage(ctx context.Context, msgId MsgId, attemptId AttemptId, params *ExpungeMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExpungeMessageRequest(c.Server, msgId, attemptId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessageAttempt(ctx context.Context, msgId MsgId, attemptId AttemptId, params *GetMessageAttemptParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMessageAttemptRequest(c.Server, msgId, attemptId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTypes(ctx context.Context, params *ListTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListEndpointsRequest generates requests for ListEndpoints
func NewListEndpointsRequest(server string, params *ListEndpointsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewCreateEndpointsRequest calls the generic CreateEndpoints builder with application/json body
func NewCreateEndpointsRequest(server string, params *CreateEndpointsParams, body CreateEndpointsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEndpointsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateEndpointsRequestWithBody generates requests for CreateEndpoints with any type of body
func NewCreateEndpointsRequestWithBody(server string, params *CreateEndpointsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewDeleteEndpointRequest generates requests for DeleteEndpoint
func NewDeleteEndpointRequest(server string, endpointId EndpointId, params *DeleteEndpointParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewGetEndpointRequest generates requests for GetEndpoint
func NewGetEndpointRequest(server string, endpointId EndpointId, params *GetEndpointParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewListEndpointAttemptsRequest generates requests for ListEndpointAttempts
func NewListEndpointAttemptsRequest(server string, endpointId EndpointId, params *ListEndpointAttemptsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/endpoints/%s/attempts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewListEndpointMessagesRequest generates requests for ListEndpointMessages
func NewListEndpointMessagesRequest(server string, endpointId EndpointId, params *ListEndpointMessagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/endpoints/%s/messages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewListEndpointMessageAttemptsRequest generates requests for ListEndpointMessageAttempts
func NewListEndpointMessageAttemptsRequest(server string, endpointId EndpointId, msgId MsgId, params *ListEndpointMessageAttemptsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "msgId", runtime.ParamLocationPath, msgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/endpoints/%s/messages/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewListMessagesRequest generates requests for ListMessages
func NewListMessagesRequest(server string, params *ListMessagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewCreateMessagesRequest calls the generic CreateMessages builder with application/json body
func NewCreateMessagesRequest(server string, params *CreateMessagesParams, body CreateMessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMessagesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateMessagesRequestWithBody generates requests for CreateMessages with any type of body
func NewCreateMessagesRequestWithBody(server string, params *CreateMessagesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewGetMessageRequest generates requests for GetMessage
func NewGetMessageRequest(server string, msgId MsgId, params *GetMessageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "msgId", runtime.ParamLocationPath, msgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewListMessageAttemptsRequest generates requests for ListMessageAttempts
func NewListMessageAttemptsRequest(server string, msgId MsgId, params *ListMessageAttemptsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "msgId", runtime.ParamLocationPath, msgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/%s/attempts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewExpungeMessageRequest generates requests for ExpungeMessage
func NewExpungeMessageRequest(server string, msgId MsgId, attemptId AttemptId, params *ExpungeMessageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "msgId", runtime.ParamLocationPath, msgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attemptId", runtime.ParamLocationPath, attemptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/%s/attempts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewGetMessageAttemptRequest generates requests for GetMessageAttempt
func NewGetMessageAttemptRequest(server string, msgId MsgId, attemptId AttemptId, params *GetMessageAttemptParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "msgId", runtime.ParamLocationPath, msgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attemptId", runtime.ParamLocationPath, attemptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/%s/attempts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, params.TenantId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("tenantId", headerParam0)

	}

	return req, nil
}

// NewListTypesRequest generates requests for ListTypes
func NewListTypesRequest(server string, params *ListTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListEndpointsWithResponse request
	ListEndpointsWithResponse(ctx context.Context, params *ListEndpointsParams, reqEditors ...RequestEditorFn) (*ListEndpointsResponse, error)

	// CreateEndpointsWithBodyWithResponse request with any body
	CreateEndpointsWithBodyWithResponse(ctx context.Context, params *CreateEndpointsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEndpointsResponse, error)

	CreateEndpointsWithResponse(ctx context.Context, params *CreateEndpointsParams, body CreateEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEndpointsResponse, error)

	// DeleteEndpointWithResponse request
	DeleteEndpointWithResponse(ctx context.Context, endpointId EndpointId, params *DeleteEndpointParams, reqEditors ...RequestEditorFn) (*DeleteEndpointResponse, error)

	// GetEndpointWithResponse request
	GetEndpointWithResponse(ctx context.Context, endpointId EndpointId, params *GetEndpointParams, reqEditors ...RequestEditorFn) (*GetEndpointResponse, error)

	// ListEndpointAttemptsWithResponse request
	ListEndpointAttemptsWithResponse(ctx context.Context, endpointId EndpointId, params *ListEndpointAttemptsParams, reqEditors ...RequestEditorFn) (*ListEndpointAttemptsResponse, error)

	// ListEndpointMessagesWithResponse request
	ListEndpointMessagesWithResponse(ctx context.Context, endpointId EndpointId, params *ListEndpointMessagesParams, reqEditors ...RequestEditorFn) (*ListEndpointMessagesResponse, error)

	// ListEndpointMessageAttemptsWithResponse request
	ListEndpointMessageAttemptsWithResponse(ctx context.Context, endpointId EndpointId, msgId MsgId, params *ListEndpointMessageAttemptsParams, reqEditors ...RequestEditorFn) (*ListEndpointMessageAttemptsResponse, error)

	// ListMessagesWithResponse request
	ListMessagesWithResponse(ctx context.Context, params *ListMessagesParams, reqEditors ...RequestEditorFn) (*ListMessagesResponse, error)

	// CreateMessagesWithBodyWithResponse request with any body
	CreateMessagesWithBodyWithResponse(ctx context.Context, params *CreateMessagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMessagesResponse, error)

	CreateMessagesWithResponse(ctx context.Context, params *CreateMessagesParams, body CreateMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMessagesResponse, error)

	// GetMessageWithResponse request
	GetMessageWithResponse(ctx context.Context, msgId MsgId, params *GetMessageParams, reqEditors ...RequestEditorFn) (*GetMessageResponse, error)

	// ListMessageAttemptsWithResponse request
	ListMessageAttemptsWithResponse(ctx context.Context, msgId MsgId, params *ListMessageAttemptsParams, reqEditors ...RequestEditorFn) (*ListMessageAttemptsResponse, error)

	// ExpungeMessageWithResponse request
	ExpungeMessageWithResponse(ctx context.Context, msgId MsgId, attemptId AttemptId, params *ExpungeMessageParams, reqEditors ...RequestEditorFn) (*ExpungeMessageResponse, error)

	// GetMessageAttemptWithResponse request
	GetMessageAttemptWithResponse(ctx context.Context, msgId MsgId, attemptId AttemptId, params *GetMessageAttemptParams, reqEditors ...RequestEditorFn) (*GetMessageAttemptResponse, error)

	// ListTypesWithResponse request
	ListTypesWithResponse(ctx context.Context, params *ListTypesParams, reqEditors ...RequestEditorFn) (*ListTypesResponse, error)
}

type ListEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EndpointList
}

// Status returns HTTPResponse.Status
func (r ListEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *EndpointResult
}

// Status returns HTTPResponse.Status
func (r CreateEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Endpoint
}

// Status returns HTTPResponse.Status
func (r GetEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEndpointAttemptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttemptList
}

// Status returns HTTPResponse.Status
func (r ListEndpointAttemptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEndpointAttemptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEndpointMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MessageList
}

// Status returns HTTPResponse.Status
func (r ListEndpointMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEndpointMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEndpointMessageAttemptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttemptList
}

// Status returns HTTPResponse.Status
func (r ListEndpointMessageAttemptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEndpointMessageAttemptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MessageList
}

// Status returns HTTPResponse.Status
func (r ListMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MessageResult
}

// Status returns HTTPResponse.Status
func (r CreateMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Message
}

// Status returns HTTPResponse.Status
func (r GetMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMessageAttemptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttemptList
}

// Status returns HTTPResponse.Status
func (r ListMessageAttemptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMessageAttemptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExpungeMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExpungeMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExpungeMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessageAttemptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Attempt
}

// Status returns HTTPResponse.Status
func (r GetMessageAttemptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessageAttemptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventTypeList
}

// Status returns HTTPResponse.Status
func (r ListTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListEndpointsWithResponse request returning *ListEndpointsResponse
func (c *ClientWithResponses) ListEndpointsWithResponse(ctx context.Context, params *ListEndpointsParams, reqEditors ...RequestEditorFn) (*ListEndpointsResponse, error) {
	rsp, err := c.ListEndpoints(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEndpointsResponse(rsp)
}

// CreateEndpointsWithBodyWithResponse request with arbitrary body returning *CreateEndpointsResponse
func (c *ClientWithResponses) CreateEndpointsWithBodyWithResponse(ctx context.Context, params *CreateEndpointsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEndpointsResponse, error) {
	rsp, err := c.CreateEndpointsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEndpointsResponse(rsp)
}

func (c *ClientWithResponses) CreateEndpointsWithResponse(ctx context.Context, params *CreateEndpointsParams, body CreateEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEndpointsResponse, error) {
	rsp, err := c.CreateEndpoints(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEndpointsResponse(rsp)
}

// DeleteEndpointWithResponse request returning *DeleteEndpointResponse
func (c *ClientWithResponses) DeleteEndpointWithResponse(ctx context.Context, endpointId EndpointId, params *DeleteEndpointParams, reqEditors ...RequestEditorFn) (*DeleteEndpointResponse, error) {
	rsp, err := c.DeleteEndpoint(ctx, endpointId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEndpointResponse(rsp)
}

// GetEndpointWithResponse request returning *GetEndpointResponse
func (c *ClientWithResponses) GetEndpointWithResponse(ctx context.Context, endpointId EndpointId, params *GetEndpointParams, reqEditors ...RequestEditorFn) (*GetEndpointResponse, error) {
	rsp, err := c.GetEndpoint(ctx, endpointId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEndpointResponse(rsp)
}

// ListEndpointAttemptsWithResponse request returning *ListEndpointAttemptsResponse
func (c *ClientWithResponses) ListEndpointAttemptsWithResponse(ctx context.Context, endpointId EndpointId, params *ListEndpointAttemptsParams, reqEditors ...RequestEditorFn) (*ListEndpointAttemptsResponse, error) {
	rsp, err := c.ListEndpointAttempts(ctx, endpointId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEndpointAttemptsResponse(rsp)
}

// ListEndpointMessagesWithResponse request returning *ListEndpointMessagesResponse
func (c *ClientWithResponses) ListEndpointMessagesWithResponse(ctx context.Context, endpointId EndpointId, params *ListEndpointMessagesParams, reqEditors ...RequestEditorFn) (*ListEndpointMessagesResponse, error) {
	rsp, err := c.ListEndpointMessages(ctx, endpointId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEndpointMessagesResponse(rsp)
}

// ListEndpointMessageAttemptsWithResponse request returning *ListEndpointMessageAttemptsResponse
func (c *ClientWithResponses) ListEndpointMessageAttemptsWithResponse(ctx context.Context, endpointId EndpointId, msgId MsgId, params *ListEndpointMessageAttemptsParams, reqEditors ...RequestEditorFn) (*ListEndpointMessageAttemptsResponse, error) {
	rsp, err := c.ListEndpointMessageAttempts(ctx, endpointId, msgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEndpointMessageAttemptsResponse(rsp)
}

// ListMessagesWithResponse request returning *ListMessagesResponse
func (c *ClientWithResponses) ListMessagesWithResponse(ctx context.Context, params *ListMessagesParams, reqEditors ...RequestEditorFn) (*ListMessagesResponse, error) {
	rsp, err := c.ListMessages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMessagesResponse(rsp)
}

// CreateMessagesWithBodyWithResponse request with arbitrary body returning *CreateMessagesResponse
func (c *ClientWithResponses) CreateMessagesWithBodyWithResponse(ctx context.Context, params *CreateMessagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMessagesResponse, error) {
	rsp, err := c.CreateMessagesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMessagesResponse(rsp)
}

func (c *ClientWithResponses) CreateMessagesWithResponse(ctx context.Context, params *CreateMessagesParams, body CreateMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMessagesResponse, error) {
	rsp, err := c.CreateMessages(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMessagesResponse(rsp)
}

// GetMessageWithResponse request returning *GetMessageResponse
func (c *ClientWithResponses) GetMessageWithResponse(ctx context.Context, msgId MsgId, params *GetMessageParams, reqEditors ...RequestEditorFn) (*GetMessageResponse, error) {
	rsp, err := c.GetMessage(ctx, msgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMessageResponse(rsp)
}

// ListMessageAttemptsWithResponse request returning *ListMessageAttemptsResponse
func (c *ClientWithResponses) ListMessageAttemptsWithResponse(ctx context.Context, msgId MsgId, params *ListMessageAttemptsParams, reqEditors ...RequestEditorFn) (*ListMessageAttemptsResponse, error) {
	rsp, err := c.ListMessageAttempts(ctx, msgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMessageAttemptsResponse(rsp)
}

// ExpungeMessageWithResponse request returning *ExpungeMessageResponse
func (c *ClientWithResponses) ExpungeMessageWithResponse(ctx context.Context, msgId MsgId, attemptId AttemptId, params *ExpungeMessageParams, reqEditors ...RequestEditorFn) (*ExpungeMessageResponse, error) {
	rsp, err := c.ExpungeMessage(ctx, msgId, attemptId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExpungeMessageResponse(rsp)
}

// GetMessageAttemptWithResponse request returning *GetMessageAttemptResponse
func (c *ClientWithResponses) GetMessageAttemptWithResponse(ctx context.Context, msgId MsgId, attemptId AttemptId, params *GetMessageAttemptParams, reqEditors ...RequestEditorFn) (*GetMessageAttemptResponse, error) {
	rsp, err := c.GetMessageAttempt(ctx, msgId, attemptId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMessageAttemptResponse(rsp)
}

// ListTypesWithResponse request returning *ListTypesResponse
func (c *ClientWithResponses) ListTypesWithResponse(ctx context.Context, params *ListTypesParams, reqEditors ...RequestEditorFn) (*ListTypesResponse, error) {
	rsp, err := c.ListTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTypesResponse(rsp)
}

// ParseListEndpointsResponse parses an HTTP response from a ListEndpointsWithResponse call
func ParseListEndpointsResponse(rsp *http.Response) (*ListEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EndpointList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateEndpointsResponse parses an HTTP response from a CreateEndpointsWithResponse call
func ParseCreateEndpointsResponse(rsp *http.Response) (*CreateEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EndpointResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteEndpointResponse parses an HTTP response from a DeleteEndpointWithResponse call
func ParseDeleteEndpointResponse(rsp *http.Response) (*DeleteEndpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEndpointResponse parses an HTTP response from a GetEndpointWithResponse call
func ParseGetEndpointResponse(rsp *http.Response) (*GetEndpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Endpoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListEndpointAttemptsResponse parses an HTTP response from a ListEndpointAttemptsWithResponse call
func ParseListEndpointAttemptsResponse(rsp *http.Response) (*ListEndpointAttemptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEndpointAttemptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttemptList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListEndpointMessagesResponse parses an HTTP response from a ListEndpointMessagesWithResponse call
func ParseListEndpointMessagesResponse(rsp *http.Response) (*ListEndpointMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEndpointMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MessageList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListEndpointMessageAttemptsResponse parses an HTTP response from a ListEndpointMessageAttemptsWithResponse call
func ParseListEndpointMessageAttemptsResponse(rsp *http.Response) (*ListEndpointMessageAttemptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEndpointMessageAttemptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttemptList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListMessagesResponse parses an HTTP response from a ListMessagesWithResponse call
func ParseListMessagesResponse(rsp *http.Response) (*ListMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MessageList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateMessagesResponse parses an HTTP response from a CreateMessagesWithResponse call
func ParseCreateMessagesResponse(rsp *http.Response) (*CreateMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MessageResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetMessageResponse parses an HTTP response from a GetMessageWithResponse call
func ParseGetMessageResponse(rsp *http.Response) (*GetMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListMessageAttemptsResponse parses an HTTP response from a ListMessageAttemptsWithResponse call
func ParseListMessageAttemptsResponse(rsp *http.Response) (*ListMessageAttemptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMessageAttemptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttemptList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExpungeMessageResponse parses an HTTP response from a ExpungeMessageWithResponse call
func ParseExpungeMessageResponse(rsp *http.Response) (*ExpungeMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExpungeMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMessageAttemptResponse parses an HTTP response from a GetMessageAttemptWithResponse call
func ParseGetMessageAttemptResponse(rsp *http.Response) (*GetMessageAttemptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMessageAttemptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Attempt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListTypesResponse parses an HTTP response from a ListTypesWithResponse call
func ParseListTypesResponse(rsp *http.Response) (*ListTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventTypeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Web Hook Endpoints
	// (GET /endpoints)
	ListEndpoints(w http.ResponseWriter, r *http.Request, params ListEndpointsParams)
	// Create Web Hook Endpoints
	// (POST /endpoints)
	CreateEndpoints(w http.ResponseWriter, r *http.Request, params CreateEndpointsParams)
	// Delete Web Hook Endpoint
	// (DELETE /endpoints/{endpointId})
	DeleteEndpoint(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params DeleteEndpointParams)
	// Get Web Hook Endpoint
	// (GET /endpoints/{endpointId})
	GetEndpoint(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params GetEndpointParams)
	// List Web Hook Endpoint Attempts
	// (GET /endpoints/{endpointId}/attempts)
	ListEndpointAttempts(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params ListEndpointAttemptsParams)
	// List Web Hook Endpoint Messages
	// (GET /endpoints/{endpointId}/messages)
	ListEndpointMessages(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params ListEndpointMessagesParams)
	// List Web Hook Endpoint Message Attempts
	// (GET /endpoints/{endpointId}/messages/{msgId})
	ListEndpointMessageAttempts(w http.ResponseWriter, r *http.Request, endpointId EndpointId, msgId MsgId, params ListEndpointMessageAttemptsParams)
	// List Web Hook Messages
	// (GET /messages)
	ListMessages(w http.ResponseWriter, r *http.Request, params ListMessagesParams)
	// Create Web Hook Messages
	// (POST /messages)
	CreateMessages(w http.ResponseWriter, r *http.Request, params CreateMessagesParams)
	// Get Web Hook Message
	// (GET /messages/{msgId})
	GetMessage(w http.ResponseWriter, r *http.Request, msgId MsgId, params GetMessageParams)
	// List Web Hook Message Attempts
	// (GET /messages/{msgId}/attempts)
	ListMessageAttempts(w http.ResponseWriter, r *http.Request, msgId MsgId, params ListMessageAttemptsParams)
	// Expunge Web Hook Message
	// (DELETE /messages/{msgId}/attempts/{attemptId})
	ExpungeMessage(w http.ResponseWriter, r *http.Request, msgId MsgId, attemptId AttemptId, params ExpungeMessageParams)
	// Get Web Hook Message Attempt
	// (GET /messages/{msgId}/attempts/{attemptId})
	GetMessageAttempt(w http.ResponseWriter, r *http.Request, msgId MsgId, attemptId AttemptId, params GetMessageAttemptParams)
	// List Web Hook Types
	// (GET /types)
	ListTypes(w http.ResponseWriter, r *http.Request, params ListTypesParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List Web Hook Endpoints
// (GET /endpoints)
func (_ Unimplemented) ListEndpoints(w http.ResponseWriter, r *http.Request, params ListEndpointsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create Web Hook Endpoints
// (POST /endpoints)
func (_ Unimplemented) CreateEndpoints(w http.ResponseWriter, r *http.Request, params CreateEndpointsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete Web Hook Endpoint
// (DELETE /endpoints/{endpointId})
func (_ Unimplemented) DeleteEndpoint(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params DeleteEndpointParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Web Hook Endpoint
// (GET /endpoints/{endpointId})
func (_ Unimplemented) GetEndpoint(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params GetEndpointParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Web Hook Endpoint Attempts
// (GET /endpoints/{endpointId}/attempts)
func (_ Unimplemented) ListEndpointAttempts(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params ListEndpointAttemptsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Web Hook Endpoint Messages
// (GET /endpoints/{endpointId}/messages)
func (_ Unimplemented) ListEndpointMessages(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params ListEndpointMessagesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Web Hook Endpoint Message Attempts
// (GET /endpoints/{endpointId}/messages/{msgId})
func (_ Unimplemented) ListEndpointMessageAttempts(w http.ResponseWriter, r *http.Request, endpointId EndpointId, msgId MsgId, params ListEndpointMessageAttemptsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Web Hook Messages
// (GET /messages)
func (_ Unimplemented) ListMessages(w http.ResponseWriter, r *http.Request, params ListMessagesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create Web Hook Messages
// (POST /messages)
func (_ Unimplemented) CreateMessages(w http.ResponseWriter, r *http.Request, params CreateMessagesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Web Hook Message
// (GET /messages/{msgId})
func (_ Unimplemented) GetMessage(w http.ResponseWriter, r *http.Request, msgId MsgId, params GetMessageParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Web Hook Message Attempts
// (GET /messages/{msgId}/attempts)
func (_ Unimplemented) ListMessageAttempts(w http.ResponseWriter, r *http.Request, msgId MsgId, params ListMessageAttemptsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Expunge Web Hook Message
// (DELETE /messages/{msgId}/attempts/{attemptId})
func (_ Unimplemented) ExpungeMessage(w http.ResponseWriter, r *http.Request, msgId MsgId, attemptId AttemptId, params ExpungeMessageParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Web Hook Message Attempt
// (GET /messages/{msgId}/attempts/{attemptId})
func (_ Unimplemented) GetMessageAttempt(w http.ResponseWriter, r *http.Request, msgId MsgId, attemptId AttemptId, params GetMessageAttemptParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Web Hook Types
// (GET /types)
func (_ Unimplemented) ListTypes(w http.ResponseWriter, r *http.Request, params ListTypesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListEndpoints operation middleware
func (siw *ServerInterfaceWrapper) ListEndpoints(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEndpointsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEndpoints(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateEndpoints operation middleware
func (siw *ServerInterfaceWrapper) CreateEndpoints(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateEndpointsParams

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEndpoints(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteEndpoint operation middleware
func (siw *ServerInterfaceWrapper) DeleteEndpoint(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "endpointId" -------------
	var endpointId EndpointId

	err = runtime.BindStyledParameterWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, chi.URLParam(r, "endpointId"), &endpointId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endpointId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteEndpointParams

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEndpoint(w, r, endpointId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEndpoint operation middleware
func (siw *ServerInterfaceWrapper) GetEndpoint(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "endpointId" -------------
	var endpointId EndpointId

	err = runtime.BindStyledParameterWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, chi.URLParam(r, "endpointId"), &endpointId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endpointId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEndpointParams

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEndpoint(w, r, endpointId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListEndpointAttempts operation middleware
func (siw *ServerInterfaceWrapper) ListEndpointAttempts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "endpointId" -------------
	var endpointId EndpointId

	err = runtime.BindStyledParameterWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, chi.URLParam(r, "endpointId"), &endpointId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endpointId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEndpointAttemptsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEndpointAttempts(w, r, endpointId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListEndpointMessages operation middleware
func (siw *ServerInterfaceWrapper) ListEndpointMessages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "endpointId" -------------
	var endpointId EndpointId

	err = runtime.BindStyledParameterWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, chi.URLParam(r, "endpointId"), &endpointId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endpointId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEndpointMessagesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEndpointMessages(w, r, endpointId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListEndpointMessageAttempts operation middleware
func (siw *ServerInterfaceWrapper) ListEndpointMessageAttempts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "endpointId" -------------
	var endpointId EndpointId

	err = runtime.BindStyledParameterWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, chi.URLParam(r, "endpointId"), &endpointId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endpointId", Err: err})
		return
	}

	// ------------- Path parameter "msgId" -------------
	var msgId MsgId

	err = runtime.BindStyledParameterWithLocation("simple", false, "msgId", runtime.ParamLocationPath, chi.URLParam(r, "msgId"), &msgId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "msgId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEndpointMessageAttemptsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEndpointMessageAttempts(w, r, endpointId, msgId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMessages operation middleware
func (siw *ServerInterfaceWrapper) ListMessages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMessagesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMessages(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMessages operation middleware
func (siw *ServerInterfaceWrapper) CreateMessages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateMessagesParams

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMessages(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMessage operation middleware
func (siw *ServerInterfaceWrapper) GetMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "msgId" -------------
	var msgId MsgId

	err = runtime.BindStyledParameterWithLocation("simple", false, "msgId", runtime.ParamLocationPath, chi.URLParam(r, "msgId"), &msgId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "msgId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMessageParams

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMessage(w, r, msgId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMessageAttempts operation middleware
func (siw *ServerInterfaceWrapper) ListMessageAttempts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "msgId" -------------
	var msgId MsgId

	err = runtime.BindStyledParameterWithLocation("simple", false, "msgId", runtime.ParamLocationPath, chi.URLParam(r, "msgId"), &msgId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "msgId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMessageAttemptsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMessageAttempts(w, r, msgId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ExpungeMessage operation middleware
func (siw *ServerInterfaceWrapper) ExpungeMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "msgId" -------------
	var msgId MsgId

	err = runtime.BindStyledParameterWithLocation("simple", false, "msgId", runtime.ParamLocationPath, chi.URLParam(r, "msgId"), &msgId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "msgId", Err: err})
		return
	}

	// ------------- Path parameter "attemptId" -------------
	var attemptId AttemptId

	err = runtime.BindStyledParameterWithLocation("simple", false, "attemptId", runtime.ParamLocationPath, chi.URLParam(r, "attemptId"), &attemptId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "attemptId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ExpungeMessageParams

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExpungeMessage(w, r, msgId, attemptId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMessageAttempt operation middleware
func (siw *ServerInterfaceWrapper) GetMessageAttempt(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "msgId" -------------
	var msgId MsgId

	err = runtime.BindStyledParameterWithLocation("simple", false, "msgId", runtime.ParamLocationPath, chi.URLParam(r, "msgId"), &msgId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "msgId", Err: err})
		return
	}

	// ------------- Path parameter "attemptId" -------------
	var attemptId AttemptId

	err = runtime.BindStyledParameterWithLocation("simple", false, "attemptId", runtime.ParamLocationPath, chi.URLParam(r, "attemptId"), &attemptId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "attemptId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMessageAttemptParams

	headers := r.Header

	// ------------- Required header parameter "tenantId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tenantId")]; found {
		var TenantId TenantId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "tenantId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationHeader, valueList[0], &TenantId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
			return
		}

		params.TenantId = TenantId

	} else {
		err := fmt.Errorf("Header parameter tenantId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMessageAttempt(w, r, msgId, attemptId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTypes operation middleware
func (siw *ServerInterfaceWrapper) ListTypes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTypesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTypes(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/endpoints", wrapper.ListEndpoints)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/endpoints", wrapper.CreateEndpoints)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/endpoints/{endpointId}", wrapper.DeleteEndpoint)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/endpoints/{endpointId}", wrapper.GetEndpoint)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/endpoints/{endpointId}/attempts", wrapper.ListEndpointAttempts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/endpoints/{endpointId}/messages", wrapper.ListEndpointMessages)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/endpoints/{endpointId}/messages/{msgId}", wrapper.ListEndpointMessageAttempts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/messages", wrapper.ListMessages)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/messages", wrapper.CreateMessages)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/messages/{msgId}", wrapper.GetMessage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/messages/{msgId}/attempts", wrapper.ListMessageAttempts)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/messages/{msgId}/attempts/{attemptId}", wrapper.ExpungeMessage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/messages/{msgId}/attempts/{attemptId}", wrapper.GetMessageAttempt)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/types", wrapper.ListTypes)
	})

	return r
}
