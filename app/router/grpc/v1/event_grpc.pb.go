// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: app/router/grpc/v1/event.proto

package eventsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventService_GetProviders_FullMethodName            = "/events.v1.EventService/GetProviders"
	EventService_ListProviders_FullMethodName           = "/events.v1.EventService/ListProviders"
	EventService_GetEventTypes_FullMethodName           = "/events.v1.EventService/GetEventTypes"
	EventService_ListEventTypes_FullMethodName          = "/events.v1.EventService/ListEventTypes"
	EventService_CreateEventTypes_FullMethodName        = "/events.v1.EventService/CreateEventTypes"
	EventService_DeleteEventTypes_FullMethodName        = "/events.v1.EventService/DeleteEventTypes"
	EventService_GetSubscriptions_FullMethodName        = "/events.v1.EventService/GetSubscriptions"
	EventService_ListSubscriptions_FullMethodName       = "/events.v1.EventService/ListSubscriptions"
	EventService_CreateSubscriptions_FullMethodName     = "/events.v1.EventService/CreateSubscriptions"
	EventService_GetNotificationTypes_FullMethodName    = "/events.v1.EventService/GetNotificationTypes"
	EventService_ListNotificationTypes_FullMethodName   = "/events.v1.EventService/ListNotificationTypes"
	EventService_CreateNotificationTypes_FullMethodName = "/events.v1.EventService/CreateNotificationTypes"
	EventService_DeleteNotificationTypes_FullMethodName = "/events.v1.EventService/DeleteNotificationTypes"
)

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServiceClient interface {
	GetProviders(ctx context.Context, in *GetProvidersRequest, opts ...grpc.CallOption) (*GetProvidersResponse, error)
	ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error)
	GetEventTypes(ctx context.Context, in *GetEventTypesRequest, opts ...grpc.CallOption) (*GetEventTypesResponse, error)
	ListEventTypes(ctx context.Context, in *ListEventTypesRequest, opts ...grpc.CallOption) (*ListEventTypesResponse, error)
	CreateEventTypes(ctx context.Context, in *CreateEventTypesRequest, opts ...grpc.CallOption) (*CreateEventTypesResponse, error)
	DeleteEventTypes(ctx context.Context, in *DeleteEventTypesRequest, opts ...grpc.CallOption) (*DeleteEventTypesResponse, error)
	GetSubscriptions(ctx context.Context, in *GetSubscriptionsRequest, opts ...grpc.CallOption) (*GetSubscriptionsResponse, error)
	ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error)
	CreateSubscriptions(ctx context.Context, in *CreateSubscriptionsRequest, opts ...grpc.CallOption) (*CreateSubscriptionsResponse, error)
	GetNotificationTypes(ctx context.Context, in *GetNotificationTypesRequest, opts ...grpc.CallOption) (*GetNotificationTypesResponse, error)
	ListNotificationTypes(ctx context.Context, in *ListNotificationTypesRequest, opts ...grpc.CallOption) (*ListNotificationTypesResponse, error)
	CreateNotificationTypes(ctx context.Context, in *CreateNotificationTypesRequest, opts ...grpc.CallOption) (*CreateNotificationTypesResponse, error)
	DeleteNotificationTypes(ctx context.Context, in *DeleteNotificationTypesRequest, opts ...grpc.CallOption) (*DeleteNotificationTypesResponse, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) GetProviders(ctx context.Context, in *GetProvidersRequest, opts ...grpc.CallOption) (*GetProvidersResponse, error) {
	out := new(GetProvidersResponse)
	err := c.cc.Invoke(ctx, EventService_GetProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error) {
	out := new(ListProvidersResponse)
	err := c.cc.Invoke(ctx, EventService_ListProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetEventTypes(ctx context.Context, in *GetEventTypesRequest, opts ...grpc.CallOption) (*GetEventTypesResponse, error) {
	out := new(GetEventTypesResponse)
	err := c.cc.Invoke(ctx, EventService_GetEventTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) ListEventTypes(ctx context.Context, in *ListEventTypesRequest, opts ...grpc.CallOption) (*ListEventTypesResponse, error) {
	out := new(ListEventTypesResponse)
	err := c.cc.Invoke(ctx, EventService_ListEventTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) CreateEventTypes(ctx context.Context, in *CreateEventTypesRequest, opts ...grpc.CallOption) (*CreateEventTypesResponse, error) {
	out := new(CreateEventTypesResponse)
	err := c.cc.Invoke(ctx, EventService_CreateEventTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) DeleteEventTypes(ctx context.Context, in *DeleteEventTypesRequest, opts ...grpc.CallOption) (*DeleteEventTypesResponse, error) {
	out := new(DeleteEventTypesResponse)
	err := c.cc.Invoke(ctx, EventService_DeleteEventTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetSubscriptions(ctx context.Context, in *GetSubscriptionsRequest, opts ...grpc.CallOption) (*GetSubscriptionsResponse, error) {
	out := new(GetSubscriptionsResponse)
	err := c.cc.Invoke(ctx, EventService_GetSubscriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error) {
	out := new(ListSubscriptionsResponse)
	err := c.cc.Invoke(ctx, EventService_ListSubscriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) CreateSubscriptions(ctx context.Context, in *CreateSubscriptionsRequest, opts ...grpc.CallOption) (*CreateSubscriptionsResponse, error) {
	out := new(CreateSubscriptionsResponse)
	err := c.cc.Invoke(ctx, EventService_CreateSubscriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetNotificationTypes(ctx context.Context, in *GetNotificationTypesRequest, opts ...grpc.CallOption) (*GetNotificationTypesResponse, error) {
	out := new(GetNotificationTypesResponse)
	err := c.cc.Invoke(ctx, EventService_GetNotificationTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) ListNotificationTypes(ctx context.Context, in *ListNotificationTypesRequest, opts ...grpc.CallOption) (*ListNotificationTypesResponse, error) {
	out := new(ListNotificationTypesResponse)
	err := c.cc.Invoke(ctx, EventService_ListNotificationTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) CreateNotificationTypes(ctx context.Context, in *CreateNotificationTypesRequest, opts ...grpc.CallOption) (*CreateNotificationTypesResponse, error) {
	out := new(CreateNotificationTypesResponse)
	err := c.cc.Invoke(ctx, EventService_CreateNotificationTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) DeleteNotificationTypes(ctx context.Context, in *DeleteNotificationTypesRequest, opts ...grpc.CallOption) (*DeleteNotificationTypesResponse, error) {
	out := new(DeleteNotificationTypesResponse)
	err := c.cc.Invoke(ctx, EventService_DeleteNotificationTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
// All implementations should embed UnimplementedEventServiceServer
// for forward compatibility
type EventServiceServer interface {
	GetProviders(context.Context, *GetProvidersRequest) (*GetProvidersResponse, error)
	ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error)
	GetEventTypes(context.Context, *GetEventTypesRequest) (*GetEventTypesResponse, error)
	ListEventTypes(context.Context, *ListEventTypesRequest) (*ListEventTypesResponse, error)
	CreateEventTypes(context.Context, *CreateEventTypesRequest) (*CreateEventTypesResponse, error)
	DeleteEventTypes(context.Context, *DeleteEventTypesRequest) (*DeleteEventTypesResponse, error)
	GetSubscriptions(context.Context, *GetSubscriptionsRequest) (*GetSubscriptionsResponse, error)
	ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error)
	CreateSubscriptions(context.Context, *CreateSubscriptionsRequest) (*CreateSubscriptionsResponse, error)
	GetNotificationTypes(context.Context, *GetNotificationTypesRequest) (*GetNotificationTypesResponse, error)
	ListNotificationTypes(context.Context, *ListNotificationTypesRequest) (*ListNotificationTypesResponse, error)
	CreateNotificationTypes(context.Context, *CreateNotificationTypesRequest) (*CreateNotificationTypesResponse, error)
	DeleteNotificationTypes(context.Context, *DeleteNotificationTypesRequest) (*DeleteNotificationTypesResponse, error)
}

// UnimplementedEventServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (UnimplementedEventServiceServer) GetProviders(context.Context, *GetProvidersRequest) (*GetProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviders not implemented")
}
func (UnimplementedEventServiceServer) ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProviders not implemented")
}
func (UnimplementedEventServiceServer) GetEventTypes(context.Context, *GetEventTypesRequest) (*GetEventTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventTypes not implemented")
}
func (UnimplementedEventServiceServer) ListEventTypes(context.Context, *ListEventTypesRequest) (*ListEventTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventTypes not implemented")
}
func (UnimplementedEventServiceServer) CreateEventTypes(context.Context, *CreateEventTypesRequest) (*CreateEventTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEventTypes not implemented")
}
func (UnimplementedEventServiceServer) DeleteEventTypes(context.Context, *DeleteEventTypesRequest) (*DeleteEventTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventTypes not implemented")
}
func (UnimplementedEventServiceServer) GetSubscriptions(context.Context, *GetSubscriptionsRequest) (*GetSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptions not implemented")
}
func (UnimplementedEventServiceServer) ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptions not implemented")
}
func (UnimplementedEventServiceServer) CreateSubscriptions(context.Context, *CreateSubscriptionsRequest) (*CreateSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscriptions not implemented")
}
func (UnimplementedEventServiceServer) GetNotificationTypes(context.Context, *GetNotificationTypesRequest) (*GetNotificationTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationTypes not implemented")
}
func (UnimplementedEventServiceServer) ListNotificationTypes(context.Context, *ListNotificationTypesRequest) (*ListNotificationTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotificationTypes not implemented")
}
func (UnimplementedEventServiceServer) CreateNotificationTypes(context.Context, *CreateNotificationTypesRequest) (*CreateNotificationTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotificationTypes not implemented")
}
func (UnimplementedEventServiceServer) DeleteNotificationTypes(context.Context, *DeleteNotificationTypesRequest) (*DeleteNotificationTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotificationTypes not implemented")
}

// UnsafeEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceServer will
// result in compilation errors.
type UnsafeEventServiceServer interface {
	mustEmbedUnimplementedEventServiceServer()
}

func RegisterEventServiceServer(s grpc.ServiceRegistrar, srv EventServiceServer) {
	s.RegisterService(&EventService_ServiceDesc, srv)
}

func _EventService_GetProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_GetProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetProviders(ctx, req.(*GetProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_ListProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).ListProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_ListProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).ListProviders(ctx, req.(*ListProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetEventTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetEventTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_GetEventTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetEventTypes(ctx, req.(*GetEventTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_ListEventTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).ListEventTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_ListEventTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).ListEventTypes(ctx, req.(*ListEventTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_CreateEventTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).CreateEventTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_CreateEventTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).CreateEventTypes(ctx, req.(*CreateEventTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_DeleteEventTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).DeleteEventTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_DeleteEventTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).DeleteEventTypes(ctx, req.(*DeleteEventTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_GetSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetSubscriptions(ctx, req.(*GetSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_ListSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).ListSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_ListSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).ListSubscriptions(ctx, req.(*ListSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_CreateSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).CreateSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_CreateSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).CreateSubscriptions(ctx, req.(*CreateSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetNotificationTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetNotificationTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_GetNotificationTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetNotificationTypes(ctx, req.(*GetNotificationTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_ListNotificationTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotificationTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).ListNotificationTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_ListNotificationTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).ListNotificationTypes(ctx, req.(*ListNotificationTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_CreateNotificationTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).CreateNotificationTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_CreateNotificationTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).CreateNotificationTypes(ctx, req.(*CreateNotificationTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_DeleteNotificationTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotificationTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).DeleteNotificationTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_DeleteNotificationTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).DeleteNotificationTypes(ctx, req.(*DeleteNotificationTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventService_ServiceDesc is the grpc.ServiceDesc for EventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "events.v1.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProviders",
			Handler:    _EventService_GetProviders_Handler,
		},
		{
			MethodName: "ListProviders",
			Handler:    _EventService_ListProviders_Handler,
		},
		{
			MethodName: "GetEventTypes",
			Handler:    _EventService_GetEventTypes_Handler,
		},
		{
			MethodName: "ListEventTypes",
			Handler:    _EventService_ListEventTypes_Handler,
		},
		{
			MethodName: "CreateEventTypes",
			Handler:    _EventService_CreateEventTypes_Handler,
		},
		{
			MethodName: "DeleteEventTypes",
			Handler:    _EventService_DeleteEventTypes_Handler,
		},
		{
			MethodName: "GetSubscriptions",
			Handler:    _EventService_GetSubscriptions_Handler,
		},
		{
			MethodName: "ListSubscriptions",
			Handler:    _EventService_ListSubscriptions_Handler,
		},
		{
			MethodName: "CreateSubscriptions",
			Handler:    _EventService_CreateSubscriptions_Handler,
		},
		{
			MethodName: "GetNotificationTypes",
			Handler:    _EventService_GetNotificationTypes_Handler,
		},
		{
			MethodName: "ListNotificationTypes",
			Handler:    _EventService_ListNotificationTypes_Handler,
		},
		{
			MethodName: "CreateNotificationTypes",
			Handler:    _EventService_CreateNotificationTypes_Handler,
		},
		{
			MethodName: "DeleteNotificationTypes",
			Handler:    _EventService_DeleteNotificationTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/router/grpc/v1/event.proto",
}
