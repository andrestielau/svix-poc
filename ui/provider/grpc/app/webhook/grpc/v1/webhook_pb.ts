// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file app/webhook/grpc/v1/webhook.proto (package webhooks.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message as Message$1, proto3 } from "@bufbuild/protobuf";

/**
 * Entities
 *
 * @generated from message webhooks.v1.App
 */
export class App extends Message$1<App> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string uid = 2;
   */
  uid = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: int32 rateLimit = 4;
   */
  rateLimit = 0;

  /**
   * @generated from field: map<string, string> metadata = 5;
   */
  metadata: { [key: string]: string } = {};

  constructor(data?: PartialMessage<App>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.App";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "rateLimit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): App {
    return new App().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): App {
    return new App().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): App {
    return new App().fromJsonString(jsonString, options);
  }

  static equals(a: App | PlainMessage<App> | undefined, b: App | PlainMessage<App> | undefined): boolean {
    return proto3.util.equals(App, a, b);
  }
}

/**
 * @generated from message webhooks.v1.EventType
 */
export class EventType extends Message$1<EventType> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: string feature_flag = 3;
   */
  featureFlag = "";

  /**
   * @generated from field: bool archived = 4;
   */
  archived = false;

  /**
   * @generated from field: map<string, bytes> schemas = 5;
   */
  schemas: { [key: string]: Uint8Array } = {};

  constructor(data?: PartialMessage<EventType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.EventType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "feature_flag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "archived", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "schemas", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 12 /* ScalarType.BYTES */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventType {
    return new EventType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventType {
    return new EventType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventType {
    return new EventType().fromJsonString(jsonString, options);
  }

  static equals(a: EventType | PlainMessage<EventType> | undefined, b: EventType | PlainMessage<EventType> | undefined): boolean {
    return proto3.util.equals(EventType, a, b);
  }
}

/**
 * @generated from message webhooks.v1.Endpoint
 */
export class Endpoint extends Message$1<Endpoint> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string uid = 2;
   */
  uid = "";

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * @generated from field: string secret = 4;
   */
  secret = "";

  /**
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * @generated from field: bool disabled = 6;
   */
  disabled = false;

  /**
   * @generated from field: int32 version = 7;
   */
  version = 0;

  /**
   * @generated from field: int32 rateLimit = 8;
   */
  rateLimit = 0;

  /**
   * @generated from field: map<string, string> metadata = 9;
   */
  metadata: { [key: string]: string } = {};

  /**
   * @generated from field: repeated string filterTypes = 10;
   */
  filterTypes: string[] = [];

  /**
   * @generated from field: repeated string channels = 11;
   */
  channels: string[] = [];

  constructor(data?: PartialMessage<Endpoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.Endpoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "disabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "rateLimit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 10, name: "filterTypes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "channels", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Endpoint {
    return new Endpoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Endpoint {
    return new Endpoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Endpoint {
    return new Endpoint().fromJsonString(jsonString, options);
  }

  static equals(a: Endpoint | PlainMessage<Endpoint> | undefined, b: Endpoint | PlainMessage<Endpoint> | undefined): boolean {
    return proto3.util.equals(Endpoint, a, b);
  }
}

/**
 * @generated from message webhooks.v1.Message
 */
export class Message extends Message$1<Message> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string event_id = 2;
   */
  eventId = "";

  /**
   * @generated from field: string event_type = 3;
   */
  eventType = "";

  /**
   * @generated from field: string timestamp = 4;
   */
  timestamp = "";

  /**
   * @generated from field: bytes payload = 5;
   */
  payload = new Uint8Array(0);

  /**
   * @generated from field: repeated string tags = 6;
   */
  tags: string[] = [];

  /**
   * @generated from field: repeated string channels = 7;
   */
  channels: string[] = [];

  constructor(data?: PartialMessage<Message>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.Message";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "event_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "event_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "payload", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "channels", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Message {
    return new Message().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJsonString(jsonString, options);
  }

  static equals(a: Message | PlainMessage<Message> | undefined, b: Message | PlainMessage<Message> | undefined): boolean {
    return proto3.util.equals(Message, a, b);
  }
}

/**
 * @generated from message webhooks.v1.Attempt
 */
export class Attempt extends Message$1<Attempt> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<Attempt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.Attempt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Attempt {
    return new Attempt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Attempt {
    return new Attempt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Attempt {
    return new Attempt().fromJsonString(jsonString, options);
  }

  static equals(a: Attempt | PlainMessage<Attempt> | undefined, b: Attempt | PlainMessage<Attempt> | undefined): boolean {
    return proto3.util.equals(Attempt, a, b);
  }
}

/**
 * @generated from message webhooks.v1.GetAppsRequest
 */
export class GetAppsRequest extends Message$1<GetAppsRequest> {
  /**
   * @generated from field: repeated string ids = 1;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<GetAppsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.GetAppsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppsRequest {
    return new GetAppsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppsRequest {
    return new GetAppsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppsRequest {
    return new GetAppsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppsRequest | PlainMessage<GetAppsRequest> | undefined, b: GetAppsRequest | PlainMessage<GetAppsRequest> | undefined): boolean {
    return proto3.util.equals(GetAppsRequest, a, b);
  }
}

/**
 * @generated from message webhooks.v1.GetAppsResponse
 */
export class GetAppsResponse extends Message$1<GetAppsResponse> {
  /**
   * @generated from field: map<string, webhooks.v1.App> data = 1;
   */
  data: { [key: string]: App } = {};

  /**
   * @generated from field: repeated webhooks.v1.Error errors = 2;
   */
  errors: Error[] = [];

  constructor(data?: PartialMessage<GetAppsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.GetAppsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: App} },
    { no: 2, name: "errors", kind: "message", T: Error, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAppsResponse {
    return new GetAppsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAppsResponse {
    return new GetAppsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAppsResponse {
    return new GetAppsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAppsResponse | PlainMessage<GetAppsResponse> | undefined, b: GetAppsResponse | PlainMessage<GetAppsResponse> | undefined): boolean {
    return proto3.util.equals(GetAppsResponse, a, b);
  }
}

/**
 * @generated from message webhooks.v1.GetEndpointsRequest
 */
export class GetEndpointsRequest extends Message$1<GetEndpointsRequest> {
  /**
   * @generated from field: string tenant_id = 1;
   */
  tenantId = "";

  /**
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<GetEndpointsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.GetEndpointsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEndpointsRequest {
    return new GetEndpointsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEndpointsRequest {
    return new GetEndpointsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEndpointsRequest {
    return new GetEndpointsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetEndpointsRequest | PlainMessage<GetEndpointsRequest> | undefined, b: GetEndpointsRequest | PlainMessage<GetEndpointsRequest> | undefined): boolean {
    return proto3.util.equals(GetEndpointsRequest, a, b);
  }
}

/**
 * @generated from message webhooks.v1.GetEndpointsResponse
 */
export class GetEndpointsResponse extends Message$1<GetEndpointsResponse> {
  /**
   * @generated from field: map<string, webhooks.v1.Endpoint> data = 1;
   */
  data: { [key: string]: Endpoint } = {};

  /**
   * @generated from field: repeated webhooks.v1.Error errors = 2;
   */
  errors: Error[] = [];

  constructor(data?: PartialMessage<GetEndpointsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.GetEndpointsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Endpoint} },
    { no: 2, name: "errors", kind: "message", T: Error, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEndpointsResponse {
    return new GetEndpointsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEndpointsResponse {
    return new GetEndpointsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEndpointsResponse {
    return new GetEndpointsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetEndpointsResponse | PlainMessage<GetEndpointsResponse> | undefined, b: GetEndpointsResponse | PlainMessage<GetEndpointsResponse> | undefined): boolean {
    return proto3.util.equals(GetEndpointsResponse, a, b);
  }
}

/**
 * @generated from message webhooks.v1.GetMessagesRequest
 */
export class GetMessagesRequest extends Message$1<GetMessagesRequest> {
  /**
   * @generated from field: string tenant_id = 1;
   */
  tenantId = "";

  /**
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<GetMessagesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.GetMessagesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMessagesRequest {
    return new GetMessagesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMessagesRequest {
    return new GetMessagesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMessagesRequest {
    return new GetMessagesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMessagesRequest | PlainMessage<GetMessagesRequest> | undefined, b: GetMessagesRequest | PlainMessage<GetMessagesRequest> | undefined): boolean {
    return proto3.util.equals(GetMessagesRequest, a, b);
  }
}

/**
 * @generated from message webhooks.v1.GetMessagesResponse
 */
export class GetMessagesResponse extends Message$1<GetMessagesResponse> {
  /**
   * @generated from field: map<string, webhooks.v1.Message> data = 1;
   */
  data: { [key: string]: Message } = {};

  /**
   * @generated from field: repeated webhooks.v1.Error errors = 2;
   */
  errors: Error[] = [];

  constructor(data?: PartialMessage<GetMessagesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.GetMessagesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Message} },
    { no: 2, name: "errors", kind: "message", T: Error, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMessagesResponse {
    return new GetMessagesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMessagesResponse {
    return new GetMessagesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMessagesResponse {
    return new GetMessagesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMessagesResponse | PlainMessage<GetMessagesResponse> | undefined, b: GetMessagesResponse | PlainMessage<GetMessagesResponse> | undefined): boolean {
    return proto3.util.equals(GetMessagesResponse, a, b);
  }
}

/**
 * @generated from message webhooks.v1.GetEventTypesRequest
 */
export class GetEventTypesRequest extends Message$1<GetEventTypesRequest> {
  /**
   * @generated from field: repeated string ids = 1;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<GetEventTypesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.GetEventTypesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEventTypesRequest {
    return new GetEventTypesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEventTypesRequest {
    return new GetEventTypesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEventTypesRequest {
    return new GetEventTypesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetEventTypesRequest | PlainMessage<GetEventTypesRequest> | undefined, b: GetEventTypesRequest | PlainMessage<GetEventTypesRequest> | undefined): boolean {
    return proto3.util.equals(GetEventTypesRequest, a, b);
  }
}

/**
 * @generated from message webhooks.v1.GetEventTypesResponse
 */
export class GetEventTypesResponse extends Message$1<GetEventTypesResponse> {
  /**
   * @generated from field: map<string, webhooks.v1.EventType> data = 1;
   */
  data: { [key: string]: EventType } = {};

  /**
   * @generated from field: repeated webhooks.v1.Error errors = 2;
   */
  errors: Error[] = [];

  constructor(data?: PartialMessage<GetEventTypesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.GetEventTypesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: EventType} },
    { no: 2, name: "errors", kind: "message", T: Error, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEventTypesResponse {
    return new GetEventTypesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEventTypesResponse {
    return new GetEventTypesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEventTypesResponse {
    return new GetEventTypesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetEventTypesResponse | PlainMessage<GetEventTypesResponse> | undefined, b: GetEventTypesResponse | PlainMessage<GetEventTypesResponse> | undefined): boolean {
    return proto3.util.equals(GetEventTypesResponse, a, b);
  }
}

/**
 * @generated from message webhooks.v1.ListAppsRequest
 */
export class ListAppsRequest extends Message$1<ListAppsRequest> {
  /**
   * @generated from field: webhooks.v1.PageRequest page = 1;
   */
  page?: PageRequest;

  constructor(data?: PartialMessage<ListAppsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.ListAppsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAppsRequest {
    return new ListAppsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAppsRequest {
    return new ListAppsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAppsRequest {
    return new ListAppsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAppsRequest | PlainMessage<ListAppsRequest> | undefined, b: ListAppsRequest | PlainMessage<ListAppsRequest> | undefined): boolean {
    return proto3.util.equals(ListAppsRequest, a, b);
  }
}

/**
 * @generated from message webhooks.v1.ListAppsResponse
 */
export class ListAppsResponse extends Message$1<ListAppsResponse> {
  /**
   * @generated from field: repeated webhooks.v1.App data = 1;
   */
  data: App[] = [];

  /**
   * @generated from field: webhooks.v1.PageResponse page = 2;
   */
  page?: PageResponse;

  constructor(data?: PartialMessage<ListAppsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.ListAppsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: App, repeated: true },
    { no: 2, name: "page", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAppsResponse {
    return new ListAppsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAppsResponse {
    return new ListAppsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAppsResponse {
    return new ListAppsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAppsResponse | PlainMessage<ListAppsResponse> | undefined, b: ListAppsResponse | PlainMessage<ListAppsResponse> | undefined): boolean {
    return proto3.util.equals(ListAppsResponse, a, b);
  }
}

/**
 * @generated from message webhooks.v1.ListEndpointsRequest
 */
export class ListEndpointsRequest extends Message$1<ListEndpointsRequest> {
  /**
   * @generated from field: string tenant_id = 1;
   */
  tenantId = "";

  /**
   * @generated from field: webhooks.v1.PageRequest page = 2;
   */
  page?: PageRequest;

  constructor(data?: PartialMessage<ListEndpointsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.ListEndpointsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEndpointsRequest {
    return new ListEndpointsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEndpointsRequest {
    return new ListEndpointsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEndpointsRequest {
    return new ListEndpointsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListEndpointsRequest | PlainMessage<ListEndpointsRequest> | undefined, b: ListEndpointsRequest | PlainMessage<ListEndpointsRequest> | undefined): boolean {
    return proto3.util.equals(ListEndpointsRequest, a, b);
  }
}

/**
 * @generated from message webhooks.v1.ListEndpointsResponse
 */
export class ListEndpointsResponse extends Message$1<ListEndpointsResponse> {
  /**
   * @generated from field: repeated webhooks.v1.Endpoint data = 1;
   */
  data: Endpoint[] = [];

  /**
   * @generated from field: webhooks.v1.PageResponse page = 2;
   */
  page?: PageResponse;

  constructor(data?: PartialMessage<ListEndpointsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.ListEndpointsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Endpoint, repeated: true },
    { no: 2, name: "page", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEndpointsResponse {
    return new ListEndpointsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEndpointsResponse {
    return new ListEndpointsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEndpointsResponse {
    return new ListEndpointsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEndpointsResponse | PlainMessage<ListEndpointsResponse> | undefined, b: ListEndpointsResponse | PlainMessage<ListEndpointsResponse> | undefined): boolean {
    return proto3.util.equals(ListEndpointsResponse, a, b);
  }
}

/**
 * @generated from message webhooks.v1.ListMessagesRequest
 */
export class ListMessagesRequest extends Message$1<ListMessagesRequest> {
  /**
   * @generated from field: string tenant_id = 1;
   */
  tenantId = "";

  /**
   * @generated from field: webhooks.v1.PageRequest page = 2;
   */
  page?: PageRequest;

  constructor(data?: PartialMessage<ListMessagesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.ListMessagesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMessagesRequest {
    return new ListMessagesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMessagesRequest {
    return new ListMessagesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMessagesRequest {
    return new ListMessagesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListMessagesRequest | PlainMessage<ListMessagesRequest> | undefined, b: ListMessagesRequest | PlainMessage<ListMessagesRequest> | undefined): boolean {
    return proto3.util.equals(ListMessagesRequest, a, b);
  }
}

/**
 * @generated from message webhooks.v1.ListMessagesResponse
 */
export class ListMessagesResponse extends Message$1<ListMessagesResponse> {
  /**
   * @generated from field: repeated webhooks.v1.Message data = 1;
   */
  data: Message[] = [];

  /**
   * @generated from field: webhooks.v1.PageResponse page = 2;
   */
  page?: PageResponse;

  constructor(data?: PartialMessage<ListMessagesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.ListMessagesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Message, repeated: true },
    { no: 2, name: "page", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMessagesResponse {
    return new ListMessagesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMessagesResponse {
    return new ListMessagesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMessagesResponse {
    return new ListMessagesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListMessagesResponse | PlainMessage<ListMessagesResponse> | undefined, b: ListMessagesResponse | PlainMessage<ListMessagesResponse> | undefined): boolean {
    return proto3.util.equals(ListMessagesResponse, a, b);
  }
}

/**
 * @generated from message webhooks.v1.ListEventTypesRequest
 */
export class ListEventTypesRequest extends Message$1<ListEventTypesRequest> {
  /**
   * @generated from field: webhooks.v1.PageRequest page = 1;
   */
  page?: PageRequest;

  constructor(data?: PartialMessage<ListEventTypesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.ListEventTypesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEventTypesRequest {
    return new ListEventTypesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEventTypesRequest {
    return new ListEventTypesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEventTypesRequest {
    return new ListEventTypesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListEventTypesRequest | PlainMessage<ListEventTypesRequest> | undefined, b: ListEventTypesRequest | PlainMessage<ListEventTypesRequest> | undefined): boolean {
    return proto3.util.equals(ListEventTypesRequest, a, b);
  }
}

/**
 * @generated from message webhooks.v1.ListEventTypesResponse
 */
export class ListEventTypesResponse extends Message$1<ListEventTypesResponse> {
  /**
   * @generated from field: repeated webhooks.v1.EventType data = 1;
   */
  data: EventType[] = [];

  /**
   * @generated from field: webhooks.v1.PageResponse page = 2;
   */
  page?: PageResponse;

  constructor(data?: PartialMessage<ListEventTypesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.ListEventTypesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: EventType, repeated: true },
    { no: 2, name: "page", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEventTypesResponse {
    return new ListEventTypesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEventTypesResponse {
    return new ListEventTypesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEventTypesResponse {
    return new ListEventTypesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEventTypesResponse | PlainMessage<ListEventTypesResponse> | undefined, b: ListEventTypesResponse | PlainMessage<ListEventTypesResponse> | undefined): boolean {
    return proto3.util.equals(ListEventTypesResponse, a, b);
  }
}

/**
 * @generated from message webhooks.v1.CreateAppsRequest
 */
export class CreateAppsRequest extends Message$1<CreateAppsRequest> {
  /**
   * @generated from field: repeated webhooks.v1.App data = 1;
   */
  data: App[] = [];

  constructor(data?: PartialMessage<CreateAppsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.CreateAppsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: App, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAppsRequest {
    return new CreateAppsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAppsRequest {
    return new CreateAppsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAppsRequest {
    return new CreateAppsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAppsRequest | PlainMessage<CreateAppsRequest> | undefined, b: CreateAppsRequest | PlainMessage<CreateAppsRequest> | undefined): boolean {
    return proto3.util.equals(CreateAppsRequest, a, b);
  }
}

/**
 * @generated from message webhooks.v1.CreateAppsResponse
 */
export class CreateAppsResponse extends Message$1<CreateAppsResponse> {
  /**
   * @generated from field: repeated webhooks.v1.App data = 1;
   */
  data: App[] = [];

  /**
   * @generated from field: repeated webhooks.v1.Error errors = 2;
   */
  errors: Error[] = [];

  constructor(data?: PartialMessage<CreateAppsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.CreateAppsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: App, repeated: true },
    { no: 2, name: "errors", kind: "message", T: Error, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAppsResponse {
    return new CreateAppsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAppsResponse {
    return new CreateAppsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAppsResponse {
    return new CreateAppsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAppsResponse | PlainMessage<CreateAppsResponse> | undefined, b: CreateAppsResponse | PlainMessage<CreateAppsResponse> | undefined): boolean {
    return proto3.util.equals(CreateAppsResponse, a, b);
  }
}

/**
 * @generated from message webhooks.v1.CreateEndpointsRequest
 */
export class CreateEndpointsRequest extends Message$1<CreateEndpointsRequest> {
  /**
   * @generated from field: string tenant_id = 1;
   */
  tenantId = "";

  /**
   * @generated from field: repeated webhooks.v1.Endpoint data = 2;
   */
  data: Endpoint[] = [];

  constructor(data?: PartialMessage<CreateEndpointsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.CreateEndpointsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "message", T: Endpoint, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEndpointsRequest {
    return new CreateEndpointsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEndpointsRequest {
    return new CreateEndpointsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEndpointsRequest {
    return new CreateEndpointsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEndpointsRequest | PlainMessage<CreateEndpointsRequest> | undefined, b: CreateEndpointsRequest | PlainMessage<CreateEndpointsRequest> | undefined): boolean {
    return proto3.util.equals(CreateEndpointsRequest, a, b);
  }
}

/**
 * @generated from message webhooks.v1.CreateEndpointsResponse
 */
export class CreateEndpointsResponse extends Message$1<CreateEndpointsResponse> {
  /**
   * @generated from field: repeated webhooks.v1.Endpoint data = 1;
   */
  data: Endpoint[] = [];

  /**
   * @generated from field: repeated webhooks.v1.Error errors = 2;
   */
  errors: Error[] = [];

  constructor(data?: PartialMessage<CreateEndpointsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.CreateEndpointsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Endpoint, repeated: true },
    { no: 2, name: "errors", kind: "message", T: Error, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEndpointsResponse {
    return new CreateEndpointsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEndpointsResponse {
    return new CreateEndpointsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEndpointsResponse {
    return new CreateEndpointsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEndpointsResponse | PlainMessage<CreateEndpointsResponse> | undefined, b: CreateEndpointsResponse | PlainMessage<CreateEndpointsResponse> | undefined): boolean {
    return proto3.util.equals(CreateEndpointsResponse, a, b);
  }
}

/**
 * @generated from message webhooks.v1.CreateMessagesRequest
 */
export class CreateMessagesRequest extends Message$1<CreateMessagesRequest> {
  /**
   * @generated from field: string tenant_id = 1;
   */
  tenantId = "";

  /**
   * @generated from field: repeated webhooks.v1.Message data = 2;
   */
  data: Message[] = [];

  constructor(data?: PartialMessage<CreateMessagesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.CreateMessagesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "message", T: Message, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateMessagesRequest {
    return new CreateMessagesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateMessagesRequest {
    return new CreateMessagesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateMessagesRequest {
    return new CreateMessagesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateMessagesRequest | PlainMessage<CreateMessagesRequest> | undefined, b: CreateMessagesRequest | PlainMessage<CreateMessagesRequest> | undefined): boolean {
    return proto3.util.equals(CreateMessagesRequest, a, b);
  }
}

/**
 * @generated from message webhooks.v1.CreateMessagesResponse
 */
export class CreateMessagesResponse extends Message$1<CreateMessagesResponse> {
  /**
   * @generated from field: repeated webhooks.v1.Message data = 1;
   */
  data: Message[] = [];

  /**
   * @generated from field: repeated webhooks.v1.Error errors = 2;
   */
  errors: Error[] = [];

  constructor(data?: PartialMessage<CreateMessagesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.CreateMessagesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Message, repeated: true },
    { no: 2, name: "errors", kind: "message", T: Error, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateMessagesResponse {
    return new CreateMessagesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateMessagesResponse {
    return new CreateMessagesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateMessagesResponse {
    return new CreateMessagesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateMessagesResponse | PlainMessage<CreateMessagesResponse> | undefined, b: CreateMessagesResponse | PlainMessage<CreateMessagesResponse> | undefined): boolean {
    return proto3.util.equals(CreateMessagesResponse, a, b);
  }
}

/**
 * @generated from message webhooks.v1.CreateEventTypesRequest
 */
export class CreateEventTypesRequest extends Message$1<CreateEventTypesRequest> {
  /**
   * @generated from field: repeated webhooks.v1.EventType data = 1;
   */
  data: EventType[] = [];

  constructor(data?: PartialMessage<CreateEventTypesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.CreateEventTypesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: EventType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEventTypesRequest {
    return new CreateEventTypesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEventTypesRequest {
    return new CreateEventTypesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEventTypesRequest {
    return new CreateEventTypesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEventTypesRequest | PlainMessage<CreateEventTypesRequest> | undefined, b: CreateEventTypesRequest | PlainMessage<CreateEventTypesRequest> | undefined): boolean {
    return proto3.util.equals(CreateEventTypesRequest, a, b);
  }
}

/**
 * @generated from message webhooks.v1.CreateEventTypesResponse
 */
export class CreateEventTypesResponse extends Message$1<CreateEventTypesResponse> {
  /**
   * @generated from field: repeated webhooks.v1.EventType data = 1;
   */
  data: EventType[] = [];

  /**
   * @generated from field: repeated webhooks.v1.Error errors = 2;
   */
  errors: Error[] = [];

  constructor(data?: PartialMessage<CreateEventTypesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.CreateEventTypesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: EventType, repeated: true },
    { no: 2, name: "errors", kind: "message", T: Error, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEventTypesResponse {
    return new CreateEventTypesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEventTypesResponse {
    return new CreateEventTypesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEventTypesResponse {
    return new CreateEventTypesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEventTypesResponse | PlainMessage<CreateEventTypesResponse> | undefined, b: CreateEventTypesResponse | PlainMessage<CreateEventTypesResponse> | undefined): boolean {
    return proto3.util.equals(CreateEventTypesResponse, a, b);
  }
}

/**
 * @generated from message webhooks.v1.PageRequest
 */
export class PageRequest extends Message$1<PageRequest> {
  /**
   * @generated from field: int32 limit = 1;
   */
  limit = 0;

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = "";

  /**
   * @generated from field: bool desc = 3;
   */
  desc = false;

  constructor(data?: PartialMessage<PageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.PageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "desc", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PageRequest {
    return new PageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PageRequest {
    return new PageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PageRequest {
    return new PageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PageRequest | PlainMessage<PageRequest> | undefined, b: PageRequest | PlainMessage<PageRequest> | undefined): boolean {
    return proto3.util.equals(PageRequest, a, b);
  }
}

/**
 * @generated from message webhooks.v1.PageResponse
 */
export class PageResponse extends Message$1<PageResponse> {
  /**
   * @generated from field: string next = 1;
   */
  next = "";

  /**
   * @generated from field: string prev = 2;
   */
  prev = "";

  /**
   * @generated from field: bool done = 3;
   */
  done = false;

  constructor(data?: PartialMessage<PageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.PageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "next", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "prev", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "done", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PageResponse {
    return new PageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PageResponse {
    return new PageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PageResponse {
    return new PageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PageResponse | PlainMessage<PageResponse> | undefined, b: PageResponse | PlainMessage<PageResponse> | undefined): boolean {
    return proto3.util.equals(PageResponse, a, b);
  }
}

/**
 * @generated from message webhooks.v1.Error
 */
export class Error extends Message$1<Error> {
  /**
   * @generated from field: int32 code = 1;
   */
  code = 0;

  /**
   * @generated from field: string index = 2;
   */
  index = "";

  /**
   * @generated from field: string reason = 3;
   */
  reason = "";

  constructor(data?: PartialMessage<Error>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "webhooks.v1.Error";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "index", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Error {
    return new Error().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Error {
    return new Error().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Error {
    return new Error().fromJsonString(jsonString, options);
  }

  static equals(a: Error | PlainMessage<Error> | undefined, b: Error | PlainMessage<Error> | undefined): boolean {
    return proto3.util.equals(Error, a, b);
  }
}

